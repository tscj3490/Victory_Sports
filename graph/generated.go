// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	context "context"
	strconv "strconv"
	time "time"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

type ResolverRoot interface {
	League() LeagueResolver
	Query() QueryResolver
	Season() SeasonResolver
}

type DirectiveRoot struct {
}
type LeagueResolver interface {
	Coverage(ctx context.Context, obj *League) (Coverage, error)
	SeasonsInclude(ctx context.Context, obj *League, orderBy string, limit int) (*SeasonsRoot, error)
}
type QueryResolver interface {
	GetLeague(ctx context.Context, leagueId int) (*League, error)
	ListSeasons(ctx context.Context, competitionId int) ([]FormSelection, error)
	ListTeamsBy(ctx context.Context, seasonId int) ([]Team, error)
	ListFixturesBySeason(ctx context.Context, seasonId int) ([]Fixture, error)
	ListFixturesBySeasonAndDate(ctx context.Context, seasonId int, filterDate time.Time, teamId int) ([]Fixture, error)
	ListFixturesBySeasonDateAndTeam(ctx context.Context, seasonId int, filterDate time.Time) ([]Fixture, error)
	GetTopscorers(ctx context.Context, seasonId int) ([]Topscorer, error)
	GetStandings(ctx context.Context, seasonId int) ([]Standing, error)
	GetStatsCalendar(ctx context.Context, seasonId int, dateParam string, teamIds []int) (StatsCalendar, error)
	GetStatsCalendarAll(ctx context.Context, dateParam string) (StatsCalendar, error)
	GetFixture(ctx context.Context, seasonId int, fixtureId int) (FixtureAndEvents, error)
	GetTeamsGroupByCollectionCode(ctx context.Context) ([]*TeamArray, error)
	GetBrands(ctx context.Context) ([]Brand, error)
	GetProductSizes(ctx context.Context) ([]ProductSize, error)
	GetProductKits(ctx context.Context) ([]ProductAttrs, error)
	GetProductGenders(ctx context.Context) ([]ProductAttrs, error)
	GetCollections(ctx context.Context, shopType string) ([]CollectionM, error)
	GetProductDetails(ctx context.Context, productId int) ([]Product, error)
	GetProductVariations(ctx context.Context, productId int) ([]ProductVariation, error)
	GetProducts(ctx context.Context, collectionId int, collectionCode string, kitCode string, productSort string) ([]Product, error)
	GetProfileHistory(ctx context.Context) ([]Order, error)
	GetProfileView(ctx context.Context) (Address, error)
	ShowCartContent(ctx context.Context) ([]ProductVariation, error)
}
type SeasonResolver interface {
	StageData(ctx context.Context, obj *Season) ([]Stage, error)
	RoundsData(ctx context.Context, obj *Season) ([]Round, error)
	FixturesInclude(ctx context.Context, obj *Season, orderBy string, limit int) ([]Fixture, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var addressImplementors = []string{"Address"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Address(ctx context.Context, sel ast.SelectionSet, obj *Address) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, addressImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Address")
		case "ID":
			out.Values[i] = ec._Address_ID(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Address_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Address_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Address_deletedAt(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._Address_userId(ctx, field, obj)
		case "contactName":
			out.Values[i] = ec._Address_contactName(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._Address_telephone(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Address_city(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Address_country(ctx, field, obj)
		case "addressLine1":
			out.Values[i] = ec._Address_addressLine1(ctx, field, obj)
		case "addressLine2":
			out.Values[i] = ec._Address_addressLine2(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._Address_postalCode(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._Address_notes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Address_ID(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Address_createdAt(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Address_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Address_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Address_userId(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UserID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _Address_contactName(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ContactName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_telephone(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Telephone, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_city(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.City, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_country(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Country, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_addressLine1(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AddressLine1, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_addressLine2(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AddressLine2, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_postalCode(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PostalCode, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Address_notes(ctx context.Context, field graphql.CollectedField, obj *Address) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Address"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Notes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var badgeImplementors = []string{"Badge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Badge(ctx context.Context, sel ast.SelectionSet, obj *Badge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, badgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Badge")
		case "createdAt":
			out.Values[i] = ec._Badge_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Badge_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Badge_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Badge_name(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Badge_image(ctx, field, obj)
		case "thumbnail":
			out.Values[i] = ec._Badge_thumbnail(ctx, field, obj)
		case "price":
			out.Values[i] = ec._Badge_price(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Badge_createdAt(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Badge_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Badge_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Badge_name(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Badge_image(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Image, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Badge_thumbnail(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Thumbnail, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Badge_price(ctx context.Context, field graphql.CollectedField, obj *Badge) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Badge"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Price, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

var brandImplementors = []string{"Brand"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Brand(ctx context.Context, sel ast.SelectionSet, obj *Brand) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, brandImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Brand")
		case "createdAt":
			out.Values[i] = ec._Brand_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Brand_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Brand_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Brand_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Brand_createdAt(ctx context.Context, field graphql.CollectedField, obj *Brand) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Brand"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Brand_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Brand) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Brand"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Brand_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Brand) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Brand"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Brand_name(ctx context.Context, field graphql.CollectedField, obj *Brand) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Brand"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var cardsImplementors = []string{"Cards"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Cards(ctx context.Context, sel ast.SelectionSet, obj *Cards) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, cardsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cards")
		case "yellowCards":
			out.Values[i] = ec._Cards_yellowCards(ctx, field, obj)
		case "redCards":
			out.Values[i] = ec._Cards_redCards(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Cards_yellowCards(ctx context.Context, field graphql.CollectedField, obj *Cards) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Cards"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.YellowCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Cards_redCards(ctx context.Context, field graphql.CollectedField, obj *Cards) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Cards"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RedCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var categoryImplementors = []string{"Category"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Category(ctx context.Context, sel ast.SelectionSet, obj *Category) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, categoryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "createdAt":
			out.Values[i] = ec._Category_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Category_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Category_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Category_name(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Category_code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Category_createdAt(ctx context.Context, field graphql.CollectedField, obj *Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Category_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Category_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Category_name(ctx context.Context, field graphql.CollectedField, obj *Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Category_code(ctx context.Context, field graphql.CollectedField, obj *Category) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Category"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Code, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var collectionMImplementors = []string{"CollectionM"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CollectionM(ctx context.Context, sel ast.SelectionSet, obj *CollectionM) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, collectionMImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CollectionM")
		case "name":
			out.Values[i] = ec._CollectionM_name(ctx, field, obj)
		case "code":
			out.Values[i] = ec._CollectionM_code(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._CollectionM_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CollectionM_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._CollectionM_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _CollectionM_name(ctx context.Context, field graphql.CollectedField, obj *CollectionM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CollectionM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _CollectionM_code(ctx context.Context, field graphql.CollectedField, obj *CollectionM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CollectionM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Code, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _CollectionM_createdAt(ctx context.Context, field graphql.CollectedField, obj *CollectionM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CollectionM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _CollectionM_updatedAt(ctx context.Context, field graphql.CollectedField, obj *CollectionM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CollectionM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _CollectionM_deletedAt(ctx context.Context, field graphql.CollectedField, obj *CollectionM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CollectionM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var coverageImplementors = []string{"Coverage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Coverage(ctx context.Context, sel ast.SelectionSet, obj *Coverage) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, coverageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Coverage")
		case "topscorerGoals":
			out.Values[i] = ec._Coverage_topscorerGoals(ctx, field, obj)
		case "topscorerAssists":
			out.Values[i] = ec._Coverage_topscorerAssists(ctx, field, obj)
		case "topscorerCards":
			out.Values[i] = ec._Coverage_topscorerCards(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Coverage_topscorerGoals(ctx context.Context, field graphql.CollectedField, obj *Coverage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Coverage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TopscorerGoals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Coverage_topscorerAssists(ctx context.Context, field graphql.CollectedField, obj *Coverage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Coverage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TopscorerAssists, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Coverage_topscorerCards(ctx context.Context, field graphql.CollectedField, obj *Coverage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Coverage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TopscorerCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

var eventsImplementors = []string{"Events"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Events(ctx context.Context, sel ast.SelectionSet, obj *Events) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, eventsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Events")
		case "localTeamEvents":
			out.Values[i] = ec._Events_localTeamEvents(ctx, field, obj)
		case "visitorTeamEvents":
			out.Values[i] = ec._Events_visitorTeamEvents(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Events_localTeamEvents(ctx context.Context, field graphql.CollectedField, obj *Events) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Events"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamEvents, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FixtureEventArray)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._FixtureEventArray(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Events_visitorTeamEvents(ctx context.Context, field graphql.CollectedField, obj *Events) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Events"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamEvents, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FixtureEventArray)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._FixtureEventArray(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var eventsIncludeImplementors = []string{"EventsInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _EventsInclude(ctx context.Context, sel ast.SelectionSet, obj *EventsInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, eventsIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventsInclude")
		case "events":
			out.Values[i] = ec._EventsInclude_events(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _EventsInclude_events(ctx context.Context, field graphql.CollectedField, obj *EventsInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "EventsInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Events, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]FixtureEvent)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._FixtureEvent(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var fixtureImplementors = []string{"Fixture"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Fixture(ctx context.Context, sel ast.SelectionSet, obj *Fixture) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fixture")
		case "id":
			out.Values[i] = ec._Fixture_id(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._Fixture_leagueId(ctx, field, obj)
		case "seasonId":
			out.Values[i] = ec._Fixture_seasonId(ctx, field, obj)
		case "stageId":
			out.Values[i] = ec._Fixture_stageId(ctx, field, obj)
		case "roundId":
			out.Values[i] = ec._Fixture_roundId(ctx, field, obj)
		case "groupId":
			out.Values[i] = ec._Fixture_groupId(ctx, field, obj)
		case "venueId":
			out.Values[i] = ec._Fixture_venueId(ctx, field, obj)
		case "localTeamId":
			out.Values[i] = ec._Fixture_localTeamId(ctx, field, obj)
		case "visitorTeamId":
			out.Values[i] = ec._Fixture_visitorTeamId(ctx, field, obj)
		case "formation":
			out.Values[i] = ec._Fixture_formation(ctx, field, obj)
		case "scores":
			out.Values[i] = ec._Fixture_scores(ctx, field, obj)
		case "time":
			out.Values[i] = ec._Fixture_time(ctx, field, obj)
		case "coaches":
			out.Values[i] = ec._Fixture_coaches(ctx, field, obj)
		case "standings":
			out.Values[i] = ec._Fixture_standings(ctx, field, obj)
		case "deleted":
			out.Values[i] = ec._Fixture_deleted(ctx, field, obj)
		case "localTeamInclude":
			out.Values[i] = ec._Fixture_localTeamInclude(ctx, field, obj)
		case "visitorTeamInclude":
			out.Values[i] = ec._Fixture_visitorTeamInclude(ctx, field, obj)
		case "eventsInclude":
			out.Values[i] = ec._Fixture_eventsInclude(ctx, field, obj)
		case "lineupInclude":
			out.Values[i] = ec._Fixture_lineupInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Fixture_id(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_leagueId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_seasonId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SeasonID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_stageId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StageID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_roundId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RoundID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_groupId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GroupID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_venueId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VenueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_localTeamId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_visitorTeamId(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fixture_formation(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Formation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureFormation)
	return ec._FixtureFormation(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_scores(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Scores, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureScore)
	return ec._FixtureScore(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_time(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Time, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureTime)
	return ec._FixtureTime(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_coaches(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Coaches, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureCoaches)
	return ec._FixtureCoaches(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_standings(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Standings, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureStandings)
	return ec._FixtureStandings(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_deleted(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Deleted, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Fixture_localTeamInclude(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(LocalTeamInclude)
	return ec._LocalTeamInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_visitorTeamInclude(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(VisitorTeamInclude)
	return ec._VisitorTeamInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_eventsInclude(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EventsInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(EventsInclude)
	return ec._EventsInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Fixture_lineupInclude(ctx context.Context, field graphql.CollectedField, obj *Fixture) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fixture"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LineupInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(LineupInclude)
	return ec._LineupInclude(ctx, field.Selections, &res)
}

var fixtureAndEventsImplementors = []string{"FixtureAndEvents"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureAndEvents(ctx context.Context, sel ast.SelectionSet, obj *FixtureAndEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureAndEventsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureAndEvents")
		case "fixture":
			out.Values[i] = ec._FixtureAndEvents_fixture(ctx, field, obj)
		case "events":
			out.Values[i] = ec._FixtureAndEvents_events(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureAndEvents_fixture(ctx context.Context, field graphql.CollectedField, obj *FixtureAndEvents) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureAndEvents"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fixture, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Fixture)
	if res == nil {
		return graphql.Null
	}
	return ec._Fixture(ctx, field.Selections, res)
}

func (ec *executionContext) _FixtureAndEvents_events(ctx context.Context, field graphql.CollectedField, obj *FixtureAndEvents) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureAndEvents"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Events, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Events)
	if res == nil {
		return graphql.Null
	}
	return ec._Events(ctx, field.Selections, res)
}

var fixtureCoachesImplementors = []string{"FixtureCoaches"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureCoaches(ctx context.Context, sel ast.SelectionSet, obj *FixtureCoaches) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureCoachesImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureCoaches")
		case "localTeamCoachId":
			out.Values[i] = ec._FixtureCoaches_localTeamCoachId(ctx, field, obj)
		case "visitorTeamCoachId":
			out.Values[i] = ec._FixtureCoaches_visitorTeamCoachId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureCoaches_localTeamCoachId(ctx context.Context, field graphql.CollectedField, obj *FixtureCoaches) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureCoaches"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamCoachID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureCoaches_visitorTeamCoachId(ctx context.Context, field graphql.CollectedField, obj *FixtureCoaches) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureCoaches"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamCoachID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var fixtureEventImplementors = []string{"FixtureEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureEvent(ctx context.Context, sel ast.SelectionSet, obj *FixtureEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureEvent")
		case "id":
			out.Values[i] = ec._FixtureEvent_id(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._FixtureEvent_teamId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._FixtureEvent_type(ctx, field, obj)
		case "fixtureId":
			out.Values[i] = ec._FixtureEvent_fixtureId(ctx, field, obj)
		case "playerId":
			out.Values[i] = ec._FixtureEvent_playerId(ctx, field, obj)
		case "playerName":
			out.Values[i] = ec._FixtureEvent_playerName(ctx, field, obj)
		case "relatedPlayerId":
			out.Values[i] = ec._FixtureEvent_relatedPlayerId(ctx, field, obj)
		case "relatedPlayerName":
			out.Values[i] = ec._FixtureEvent_relatedPlayerName(ctx, field, obj)
		case "minute":
			out.Values[i] = ec._FixtureEvent_minute(ctx, field, obj)
		case "extraMinute":
			out.Values[i] = ec._FixtureEvent_extraMinute(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._FixtureEvent_reason(ctx, field, obj)
		case "injuried":
			out.Values[i] = ec._FixtureEvent_injuried(ctx, field, obj)
		case "result":
			out.Values[i] = ec._FixtureEvent_result(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureEvent_id(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_teamId(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEvent_type(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEvent_fixtureId(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FixtureID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_playerId(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_playerName(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEvent_relatedPlayerId(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RelatedPlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_relatedPlayerName(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RelatedPlayerName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEvent_minute(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Minute, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_extraMinute(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ExtraMinute, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureEvent_reason(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEvent_injuried(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Injuried, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _FixtureEvent_result(ctx context.Context, field graphql.CollectedField, obj *FixtureEvent) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEvent"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Result, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var fixtureEventArrayImplementors = []string{"FixtureEventArray"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureEventArray(ctx context.Context, sel ast.SelectionSet, obj *FixtureEventArray) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureEventArrayImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureEventArray")
		case "key":
			out.Values[i] = ec._FixtureEventArray_key(ctx, field, obj)
		case "value":
			out.Values[i] = ec._FixtureEventArray_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureEventArray_key(ctx context.Context, field graphql.CollectedField, obj *FixtureEventArray) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEventArray"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureEventArray_value(ctx context.Context, field graphql.CollectedField, obj *FixtureEventArray) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureEventArray"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]FixtureEvent)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._FixtureEvent(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var fixtureFormationImplementors = []string{"FixtureFormation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureFormation(ctx context.Context, sel ast.SelectionSet, obj *FixtureFormation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureFormationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureFormation")
		case "localTeamFormation":
			out.Values[i] = ec._FixtureFormation_localTeamFormation(ctx, field, obj)
		case "visitorTeamFormation":
			out.Values[i] = ec._FixtureFormation_visitorTeamFormation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureFormation_localTeamFormation(ctx context.Context, field graphql.CollectedField, obj *FixtureFormation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureFormation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamFormation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureFormation_visitorTeamFormation(ctx context.Context, field graphql.CollectedField, obj *FixtureFormation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureFormation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamFormation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var fixturePlayerImplementors = []string{"FixturePlayer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixturePlayer(ctx context.Context, sel ast.SelectionSet, obj *FixturePlayer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixturePlayerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixturePlayer")
		case "teamId":
			out.Values[i] = ec._FixturePlayer_teamId(ctx, field, obj)
		case "fixtureId":
			out.Values[i] = ec._FixturePlayer_fixtureId(ctx, field, obj)
		case "playerId":
			out.Values[i] = ec._FixturePlayer_playerId(ctx, field, obj)
		case "playerName":
			out.Values[i] = ec._FixturePlayer_playerName(ctx, field, obj)
		case "number":
			out.Values[i] = ec._FixturePlayer_number(ctx, field, obj)
		case "position":
			out.Values[i] = ec._FixturePlayer_position(ctx, field, obj)
		case "formationPosition":
			out.Values[i] = ec._FixturePlayer_formationPosition(ctx, field, obj)
		case "posX":
			out.Values[i] = ec._FixturePlayer_posX(ctx, field, obj)
		case "posY":
			out.Values[i] = ec._FixturePlayer_posY(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._FixturePlayer_stats(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixturePlayer_teamId(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_fixtureId(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FixtureID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_playerId(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_playerName(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_number(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Number, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_position(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Position, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixturePlayer_formationPosition(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FormationPosition, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_posX(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PosX, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_posY(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PosY, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixturePlayer_stats(ctx context.Context, field graphql.CollectedField, obj *FixturePlayer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Stats, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixturePlayerStats)
	return ec._FixturePlayerStats(ctx, field.Selections, &res)
}

var fixturePlayerStatsImplementors = []string{"FixturePlayerStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixturePlayerStats(ctx context.Context, sel ast.SelectionSet, obj *FixturePlayerStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixturePlayerStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixturePlayerStats")
		case "shorts":
			out.Values[i] = ec._FixturePlayerStats_shorts(ctx, field, obj)
		case "goals":
			out.Values[i] = ec._FixturePlayerStats_goals(ctx, field, obj)
		case "fouls":
			out.Values[i] = ec._FixturePlayerStats_fouls(ctx, field, obj)
		case "cards":
			out.Values[i] = ec._FixturePlayerStats_cards(ctx, field, obj)
		case "passing":
			out.Values[i] = ec._FixturePlayerStats_passing(ctx, field, obj)
		case "other":
			out.Values[i] = ec._FixturePlayerStats_other(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixturePlayerStats_shorts(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Shorts, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Shots)
	return ec._Shots(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixturePlayerStats_goals(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Goals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Goals)
	return ec._Goals(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixturePlayerStats_fouls(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fouls, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Fouls)
	return ec._Fouls(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixturePlayerStats_cards(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Cards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Cards)
	return ec._Cards(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixturePlayerStats_passing(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Passing, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Passing)
	return ec._Passing(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixturePlayerStats_other(ctx context.Context, field graphql.CollectedField, obj *FixturePlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixturePlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Other, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Other)
	return ec._Other(ctx, field.Selections, &res)
}

var fixtureScoreImplementors = []string{"FixtureScore"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureScore(ctx context.Context, sel ast.SelectionSet, obj *FixtureScore) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureScoreImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureScore")
		case "localTeamScore":
			out.Values[i] = ec._FixtureScore_localTeamScore(ctx, field, obj)
		case "visitorTeamScore":
			out.Values[i] = ec._FixtureScore_visitorTeamScore(ctx, field, obj)
		case "localTeamScorePen":
			out.Values[i] = ec._FixtureScore_localTeamScorePen(ctx, field, obj)
		case "visitorTeamScorePen":
			out.Values[i] = ec._FixtureScore_visitorTeamScorePen(ctx, field, obj)
		case "halfTimeScore":
			out.Values[i] = ec._FixtureScore_halfTimeScore(ctx, field, obj)
		case "fullTimeScore":
			out.Values[i] = ec._FixtureScore_fullTimeScore(ctx, field, obj)
		case "extraTimeScore":
			out.Values[i] = ec._FixtureScore_extraTimeScore(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureScore_localTeamScore(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamScore, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureScore_visitorTeamScore(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamScore, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureScore_localTeamScorePen(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamScorePen, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureScore_visitorTeamScorePen(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamScorePen, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureScore_halfTimeScore(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.HalfTimeScore, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureScore_fullTimeScore(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FullTimeScore, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureScore_extraTimeScore(ctx context.Context, field graphql.CollectedField, obj *FixtureScore) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureScore"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ExtraTimeScore, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var fixtureStandingsImplementors = []string{"FixtureStandings"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureStandings(ctx context.Context, sel ast.SelectionSet, obj *FixtureStandings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureStandingsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureStandings")
		case "localTeamPosition":
			out.Values[i] = ec._FixtureStandings_localTeamPosition(ctx, field, obj)
		case "visitorTeamPosition":
			out.Values[i] = ec._FixtureStandings_visitorTeamPosition(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureStandings_localTeamPosition(ctx context.Context, field graphql.CollectedField, obj *FixtureStandings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStandings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeamPosition, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureStandings_visitorTeamPosition(ctx context.Context, field graphql.CollectedField, obj *FixtureStandings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStandings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeamPosition, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var fixtureStartingAtImplementors = []string{"FixtureStartingAt"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureStartingAt(ctx context.Context, sel ast.SelectionSet, obj *FixtureStartingAt) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureStartingAtImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureStartingAt")
		case "dateTime":
			out.Values[i] = ec._FixtureStartingAt_dateTime(ctx, field, obj)
		case "date":
			out.Values[i] = ec._FixtureStartingAt_date(ctx, field, obj)
		case "time":
			out.Values[i] = ec._FixtureStartingAt_time(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._FixtureStartingAt_timestamp(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._FixtureStartingAt_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureStartingAt_dateTime(ctx context.Context, field graphql.CollectedField, obj *FixtureStartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DateTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureStartingAt_date(ctx context.Context, field graphql.CollectedField, obj *FixtureStartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Date, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureStartingAt_time(ctx context.Context, field graphql.CollectedField, obj *FixtureStartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Time, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureStartingAt_timestamp(ctx context.Context, field graphql.CollectedField, obj *FixtureStartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Timestamp, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureStartingAt_timezone(ctx context.Context, field graphql.CollectedField, obj *FixtureStartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureStartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Timezone, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var fixtureTimeImplementors = []string{"FixtureTime"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FixtureTime(ctx context.Context, sel ast.SelectionSet, obj *FixtureTime) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fixtureTimeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FixtureTime")
		case "status":
			out.Values[i] = ec._FixtureTime_status(ctx, field, obj)
		case "startingAt":
			out.Values[i] = ec._FixtureTime_startingAt(ctx, field, obj)
		case "minute":
			out.Values[i] = ec._FixtureTime_minute(ctx, field, obj)
		case "second":
			out.Values[i] = ec._FixtureTime_second(ctx, field, obj)
		case "addedTime":
			out.Values[i] = ec._FixtureTime_addedTime(ctx, field, obj)
		case "extraTime":
			out.Values[i] = ec._FixtureTime_extraTime(ctx, field, obj)
		case "injuryTime":
			out.Values[i] = ec._FixtureTime_injuryTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FixtureTime_status(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FixtureTime_startingAt(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StartingAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(FixtureStartingAt)
	return ec._FixtureStartingAt(ctx, field.Selections, &res)
}

func (ec *executionContext) _FixtureTime_minute(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Minute, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureTime_second(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Second, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureTime_addedTime(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AddedTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureTime_extraTime(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ExtraTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FixtureTime_injuryTime(ctx context.Context, field graphql.CollectedField, obj *FixtureTime) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FixtureTime"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InjuryTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var formSelectionImplementors = []string{"FormSelection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FormSelection(ctx context.Context, sel ast.SelectionSet, obj *FormSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, formSelectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FormSelection")
		case "name":
			out.Values[i] = ec._FormSelection_name(ctx, field, obj)
		case "id":
			out.Values[i] = ec._FormSelection_id(ctx, field, obj)
		case "href":
			out.Values[i] = ec._FormSelection_href(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FormSelection_name(ctx context.Context, field graphql.CollectedField, obj *FormSelection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FormSelection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FormSelection_id(ctx context.Context, field graphql.CollectedField, obj *FormSelection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FormSelection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _FormSelection_href(ctx context.Context, field graphql.CollectedField, obj *FormSelection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FormSelection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Href, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var foulsImplementors = []string{"Fouls"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Fouls(ctx context.Context, sel ast.SelectionSet, obj *Fouls) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, foulsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fouls")
		case "drawn":
			out.Values[i] = ec._Fouls_drawn(ctx, field, obj)
		case "comitted":
			out.Values[i] = ec._Fouls_comitted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Fouls_drawn(ctx context.Context, field graphql.CollectedField, obj *Fouls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fouls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Drawn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Fouls_comitted(ctx context.Context, field graphql.CollectedField, obj *Fouls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Fouls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Comitted, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var goalsImplementors = []string{"Goals"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Goals(ctx context.Context, sel ast.SelectionSet, obj *Goals) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, goalsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Goals")
		case "scored":
			out.Values[i] = ec._Goals_scored(ctx, field, obj)
		case "conceded":
			out.Values[i] = ec._Goals_conceded(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Goals_scored(ctx context.Context, field graphql.CollectedField, obj *Goals) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Goals"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Scored, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Goals_conceded(ctx context.Context, field graphql.CollectedField, obj *Goals) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Goals"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Conceded, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var leagueImplementors = []string{"League"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _League(ctx context.Context, sel ast.SelectionSet, obj *League) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, leagueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("League")
		case "id":
			out.Values[i] = ec._League_id(ctx, field, obj)
		case "legacyId":
			out.Values[i] = ec._League_legacyId(ctx, field, obj)
		case "countryId":
			out.Values[i] = ec._League_countryId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._League_name(ctx, field, obj)
		case "isCup":
			out.Values[i] = ec._League_isCup(ctx, field, obj)
		case "currentSeasonId":
			out.Values[i] = ec._League_currentSeasonId(ctx, field, obj)
		case "currentRoundId":
			out.Values[i] = ec._League_currentRoundId(ctx, field, obj)
		case "currentStageId":
			out.Values[i] = ec._League_currentStageId(ctx, field, obj)
		case "liveStandings":
			out.Values[i] = ec._League_liveStandings(ctx, field, obj)
		case "coverage":
			out.Values[i] = ec._League_coverage(ctx, field, obj)
		case "seasonsInclude":
			out.Values[i] = ec._League_seasonsInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _League_id(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_legacyId(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LegacyID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_countryId(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CountryID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_name(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _League_isCup(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsCup, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _League_currentSeasonId(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CurrentSeasonID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_currentRoundId(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CurrentRoundID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_currentStageId(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CurrentStageID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _League_liveStandings(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "League"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LiveStandings, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _League_coverage(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "League",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.League().Coverage(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(Coverage)
		return ec._Coverage(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _League_seasonsInclude(ctx context.Context, field graphql.CollectedField, obj *League) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["orderBy"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limit"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "League",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.League().SeasonsInclude(ctx, obj, args["orderBy"].(string), args["limit"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*SeasonsRoot)
		if res == nil {
			return graphql.Null
		}
		return ec._SeasonsRoot(ctx, field.Selections, res)
	})
}

var leagueMImplementors = []string{"LeagueM"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LeagueM(ctx context.Context, sel ast.SelectionSet, obj *LeagueM) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, leagueMImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeagueM")
		case "league":
			out.Values[i] = ec._LeagueM_league(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._LeagueM_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._LeagueM_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._LeagueM_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LeagueM_league(ctx context.Context, field graphql.CollectedField, obj *LeagueM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LeagueM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.League, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(League)
	return ec._League(ctx, field.Selections, &res)
}

func (ec *executionContext) _LeagueM_createdAt(ctx context.Context, field graphql.CollectedField, obj *LeagueM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LeagueM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _LeagueM_updatedAt(ctx context.Context, field graphql.CollectedField, obj *LeagueM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LeagueM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _LeagueM_deletedAt(ctx context.Context, field graphql.CollectedField, obj *LeagueM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LeagueM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var lineupIncludeImplementors = []string{"LineupInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LineupInclude(ctx context.Context, sel ast.SelectionSet, obj *LineupInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, lineupIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LineupInclude")
		case "players":
			out.Values[i] = ec._LineupInclude_players(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LineupInclude_players(ctx context.Context, field graphql.CollectedField, obj *LineupInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LineupInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Players, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]FixturePlayer)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._FixturePlayer(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var localTeamIncludeImplementors = []string{"LocalTeamInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _LocalTeamInclude(ctx context.Context, sel ast.SelectionSet, obj *LocalTeamInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, localTeamIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalTeamInclude")
		case "localTeam":
			out.Values[i] = ec._LocalTeamInclude_localTeam(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _LocalTeamInclude_localTeam(ctx context.Context, field graphql.CollectedField, obj *LocalTeamInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "LocalTeamInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LocalTeam, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Team)
	return ec._Team(ctx, field.Selections, &res)
}

var orderImplementors = []string{"Order"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Order(ctx context.Context, sel ast.SelectionSet, obj *Order) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, orderImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Order")
		case "createdAt":
			out.Values[i] = ec._Order_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Order_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Order_deletedAt(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Order_reference(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._Order_userId(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Order_user(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Order_email(ctx, field, obj)
		case "paymentAmount":
			out.Values[i] = ec._Order_paymentAmount(ctx, field, obj)
		case "abandonedReason":
			out.Values[i] = ec._Order_abandonedReason(ctx, field, obj)
		case "discountValue":
			out.Values[i] = ec._Order_discountValue(ctx, field, obj)
		case "trackingNumber":
			out.Values[i] = ec._Order_trackingNumber(ctx, field, obj)
		case "shippedAt":
			out.Values[i] = ec._Order_shippedAt(ctx, field, obj)
		case "returnedAt":
			out.Values[i] = ec._Order_returnedAt(ctx, field, obj)
		case "cancelledAt":
			out.Values[i] = ec._Order_cancelledAt(ctx, field, obj)
		case "shippingAddressId":
			out.Values[i] = ec._Order_shippingAddressId(ctx, field, obj)
		case "paymentMethod":
			out.Values[i] = ec._Order_paymentMethod(ctx, field, obj)
		case "shippingMethod":
			out.Values[i] = ec._Order_shippingMethod(ctx, field, obj)
		case "subtotal":
			out.Values[i] = ec._Order_subtotal(ctx, field, obj)
		case "VAT":
			out.Values[i] = ec._Order_VAT(ctx, field, obj)
		case "shippingCost":
			out.Values[i] = ec._Order_shippingCost(ctx, field, obj)
		case "total":
			out.Values[i] = ec._Order_total(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._Order_notes(ctx, field, obj)
		case "orderItems":
			out.Values[i] = ec._Order_orderItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Order_createdAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_reference(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Reference, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_userId(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UserID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _Order_user(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.User, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(User)
	return ec._User(ctx, field.Selections, &res)
}

func (ec *executionContext) _Order_email(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_paymentAmount(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PaymentAmount, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Order_abandonedReason(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AbandonedReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_discountValue(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DiscountValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Order_trackingNumber(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TrackingNumber, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_shippedAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShippedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_returnedAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ReturnedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_cancelledAt(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CancelledAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Order_shippingAddressId(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShippingAddressID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Order_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PaymentMethod, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_shippingMethod(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShippingMethod, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_subtotal(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Subtotal, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Order_VAT(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VAT, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Order_shippingCost(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShippingCost, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Order_total(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Total, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Order_notes(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Notes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Order_orderItems(ctx context.Context, field graphql.CollectedField, obj *Order) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Order"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OrderItems, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]OrderItem)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._OrderItem(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var orderItemImplementors = []string{"OrderItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _OrderItem(ctx context.Context, sel ast.SelectionSet, obj *OrderItem) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, orderItemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderItem")
		case "createdAt":
			out.Values[i] = ec._OrderItem_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._OrderItem_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._OrderItem_deletedAt(ctx, field, obj)
		case "orderId":
			out.Values[i] = ec._OrderItem_orderId(ctx, field, obj)
		case "productVariationId":
			out.Values[i] = ec._OrderItem_productVariationId(ctx, field, obj)
		case "productVariation":
			out.Values[i] = ec._OrderItem_productVariation(ctx, field, obj)
		case "persistProductDetailsJSON":
			out.Values[i] = ec._OrderItem_persistProductDetailsJSON(ctx, field, obj)
		case "customizedName":
			out.Values[i] = ec._OrderItem_customizedName(ctx, field, obj)
		case "customizedNumber":
			out.Values[i] = ec._OrderItem_customizedNumber(ctx, field, obj)
		case "quantity":
			out.Values[i] = ec._OrderItem_quantity(ctx, field, obj)
		case "price":
			out.Values[i] = ec._OrderItem_price(ctx, field, obj)
		case "discountRate":
			out.Values[i] = ec._OrderItem_discountRate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _OrderItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _OrderItem_updatedAt(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _OrderItem_deletedAt(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _OrderItem_orderId(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OrderID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrderItem_productVariationId(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ProductVariationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrderItem_productVariation(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ProductVariation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ProductVariation)
	return ec._ProductVariation(ctx, field.Selections, &res)
}

func (ec *executionContext) _OrderItem_persistProductDetailsJSON(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PersistProductDetailsJSON, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrderItem_customizedName(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CustomizedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _OrderItem_customizedNumber(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CustomizedNumber, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrderItem_quantity(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Quantity, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _OrderItem_price(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Price, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _OrderItem_discountRate(ctx context.Context, field graphql.CollectedField, obj *OrderItem) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrderItem"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DiscountRate, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var otherImplementors = []string{"Other"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Other(ctx context.Context, sel ast.SelectionSet, obj *Other) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, otherImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Other")
		case "assists":
			out.Values[i] = ec._Other_assists(ctx, field, obj)
		case "offsides":
			out.Values[i] = ec._Other_offsides(ctx, field, obj)
		case "saves":
			out.Values[i] = ec._Other_saves(ctx, field, obj)
		case "penScored":
			out.Values[i] = ec._Other_penScored(ctx, field, obj)
		case "penMissed":
			out.Values[i] = ec._Other_penMissed(ctx, field, obj)
		case "penSaved":
			out.Values[i] = ec._Other_penSaved(ctx, field, obj)
		case "penCommitted":
			out.Values[i] = ec._Other_penCommitted(ctx, field, obj)
		case "penWon":
			out.Values[i] = ec._Other_penWon(ctx, field, obj)
		case "hitWoodwork":
			out.Values[i] = ec._Other_hitWoodwork(ctx, field, obj)
		case "tackles":
			out.Values[i] = ec._Other_tackles(ctx, field, obj)
		case "blocks":
			out.Values[i] = ec._Other_blocks(ctx, field, obj)
		case "interceptions":
			out.Values[i] = ec._Other_interceptions(ctx, field, obj)
		case "clearances":
			out.Values[i] = ec._Other_clearances(ctx, field, obj)
		case "minutesPlayed":
			out.Values[i] = ec._Other_minutesPlayed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Other_assists(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Assists, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_offsides(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Offsides, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_saves(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Saves, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_penScored(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenScored, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_penMissed(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenMissed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_penSaved(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenSaved, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_penCommitted(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenCommitted, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_penWon(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenWon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_hitWoodwork(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.HitWoodwork, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_tackles(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Tackles, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_blocks(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Blocks, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_interceptions(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interceptions, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_clearances(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Clearances, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Other_minutesPlayed(ctx context.Context, field graphql.CollectedField, obj *Other) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Other"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MinutesPlayed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var passingImplementors = []string{"Passing"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Passing(ctx context.Context, sel ast.SelectionSet, obj *Passing) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, passingImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Passing")
		case "totalCrosses":
			out.Values[i] = ec._Passing_totalCrosses(ctx, field, obj)
		case "crossesAccuracy":
			out.Values[i] = ec._Passing_crossesAccuracy(ctx, field, obj)
		case "passes":
			out.Values[i] = ec._Passing_passes(ctx, field, obj)
		case "passesAccuracy":
			out.Values[i] = ec._Passing_passesAccuracy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Passing_totalCrosses(ctx context.Context, field graphql.CollectedField, obj *Passing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Passing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TotalCrosses, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Passing_crossesAccuracy(ctx context.Context, field graphql.CollectedField, obj *Passing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Passing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CrossesAccuracy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Passing_passes(ctx context.Context, field graphql.CollectedField, obj *Passing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Passing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Passes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Passing_passesAccuracy(ctx context.Context, field graphql.CollectedField, obj *Passing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Passing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PassesAccuracy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var playerImplementors = []string{"Player"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *Player) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "playerId":
			out.Values[i] = ec._Player_playerId(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._Player_teamId(ctx, field, obj)
		case "countryId":
			out.Values[i] = ec._Player_countryId(ctx, field, obj)
		case "positionId":
			out.Values[i] = ec._Player_positionId(ctx, field, obj)
		case "commonName":
			out.Values[i] = ec._Player_commonName(ctx, field, obj)
		case "fullName":
			out.Values[i] = ec._Player_fullName(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Player_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Player_lastName(ctx, field, obj)
		case "nationality":
			out.Values[i] = ec._Player_nationality(ctx, field, obj)
		case "birthdate":
			out.Values[i] = ec._Player_birthdate(ctx, field, obj)
		case "birthcountry":
			out.Values[i] = ec._Player_birthcountry(ctx, field, obj)
		case "birthplace":
			out.Values[i] = ec._Player_birthplace(ctx, field, obj)
		case "height":
			out.Values[i] = ec._Player_height(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._Player_weight(ctx, field, obj)
		case "imagePath":
			out.Values[i] = ec._Player_imagePath(ctx, field, obj)
		case "teamInclude":
			out.Values[i] = ec._Player_teamInclude(ctx, field, obj)
		case "statsInclude":
			out.Values[i] = ec._Player_statsInclude(ctx, field, obj)
		case "transfersInclude":
			out.Values[i] = ec._Player_transfersInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Player_playerId(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Player_teamId(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Player_countryId(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CountryID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Player_positionId(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PositionID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Player_commonName(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CommonName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_fullName(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FullName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_firstName(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FirstName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_lastName(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LastName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_nationality(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Nationality, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_birthdate(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Birthdate, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_birthcountry(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Birthcountry, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_birthplace(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Birthplace, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_height(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Height, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_weight(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Weight, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_imagePath(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ImagePath, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Player_teamInclude(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(TeamInclude)
	return ec._TeamInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Player_statsInclude(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StatsInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(StatsInclude)
	return ec._StatsInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Player_transfersInclude(ctx context.Context, field graphql.CollectedField, obj *Player) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Player"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TransfersInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(TransfersInclude)
	return ec._TransfersInclude(ctx, field.Selections, &res)
}

var playerIncludeImplementors = []string{"PlayerInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PlayerInclude(ctx context.Context, sel ast.SelectionSet, obj *PlayerInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerInclude")
		case "player":
			out.Values[i] = ec._PlayerInclude_player(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PlayerInclude_player(ctx context.Context, field graphql.CollectedField, obj *PlayerInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Player, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Player)
	return ec._Player(ctx, field.Selections, &res)
}

var playerPositionImplementors = []string{"PlayerPosition"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PlayerPosition(ctx context.Context, sel ast.SelectionSet, obj *PlayerPosition) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerPositionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerPosition")
		case "id":
			out.Values[i] = ec._PlayerPosition_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._PlayerPosition_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PlayerPosition_id(ctx context.Context, field graphql.CollectedField, obj *PlayerPosition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerPosition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerPosition_name(ctx context.Context, field graphql.CollectedField, obj *PlayerPosition) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerPosition"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var playerSquadStatsImplementors = []string{"PlayerSquadStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PlayerSquadStats(ctx context.Context, sel ast.SelectionSet, obj *PlayerSquadStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerSquadStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerSquadStats")
		case "playerId":
			out.Values[i] = ec._PlayerSquadStats_playerId(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._PlayerSquadStats_teamId(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._PlayerSquadStats_leagueId(ctx, field, obj)
		case "minutes":
			out.Values[i] = ec._PlayerSquadStats_minutes(ctx, field, obj)
		case "appearences":
			out.Values[i] = ec._PlayerSquadStats_appearences(ctx, field, obj)
		case "lineups":
			out.Values[i] = ec._PlayerSquadStats_lineups(ctx, field, obj)
		case "substituteIn":
			out.Values[i] = ec._PlayerSquadStats_substituteIn(ctx, field, obj)
		case "substituteOut":
			out.Values[i] = ec._PlayerSquadStats_substituteOut(ctx, field, obj)
		case "substituteOnBench":
			out.Values[i] = ec._PlayerSquadStats_substituteOnBench(ctx, field, obj)
		case "goals":
			out.Values[i] = ec._PlayerSquadStats_goals(ctx, field, obj)
		case "yellowCards":
			out.Values[i] = ec._PlayerSquadStats_yellowCards(ctx, field, obj)
		case "yellowred":
			out.Values[i] = ec._PlayerSquadStats_yellowred(ctx, field, obj)
		case "redCards":
			out.Values[i] = ec._PlayerSquadStats_redCards(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PlayerSquadStats_type(ctx, field, obj)
		case "playerInclude":
			out.Values[i] = ec._PlayerSquadStats_playerInclude(ctx, field, obj)
		case "positionInclude":
			out.Values[i] = ec._PlayerSquadStats_positionInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PlayerSquadStats_playerId(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_teamId(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_leagueId(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_minutes(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Minutes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_appearences(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Appearences, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_lineups(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Lineups, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_substituteIn(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_substituteOut(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_substituteOnBench(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteOnBench, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_goals(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Goals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_yellowCards(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.YellowCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_yellowred(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Yellowred, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_redCards(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RedCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerSquadStats_type(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _PlayerSquadStats_playerInclude(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PlayerInclude)
	return ec._PlayerInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _PlayerSquadStats_positionInclude(ctx context.Context, field graphql.CollectedField, obj *PlayerSquadStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerSquadStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PositionInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PositionInclude)
	return ec._PositionInclude(ctx, field.Selections, &res)
}

var playerStatsImplementors = []string{"PlayerStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PlayerStats(ctx context.Context, sel ast.SelectionSet, obj *PlayerStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerStats")
		case "playerId":
			out.Values[i] = ec._PlayerStats_playerId(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._PlayerStats_teamId(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._PlayerStats_leagueId(ctx, field, obj)
		case "minutes":
			out.Values[i] = ec._PlayerStats_minutes(ctx, field, obj)
		case "appearences":
			out.Values[i] = ec._PlayerStats_appearences(ctx, field, obj)
		case "lineups":
			out.Values[i] = ec._PlayerStats_lineups(ctx, field, obj)
		case "substituteIn":
			out.Values[i] = ec._PlayerStats_substituteIn(ctx, field, obj)
		case "substituteOut":
			out.Values[i] = ec._PlayerStats_substituteOut(ctx, field, obj)
		case "substituteOnBench":
			out.Values[i] = ec._PlayerStats_substituteOnBench(ctx, field, obj)
		case "goals":
			out.Values[i] = ec._PlayerStats_goals(ctx, field, obj)
		case "yellowCards":
			out.Values[i] = ec._PlayerStats_yellowCards(ctx, field, obj)
		case "yellowred":
			out.Values[i] = ec._PlayerStats_yellowred(ctx, field, obj)
		case "redCards":
			out.Values[i] = ec._PlayerStats_redCards(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PlayerStats_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PlayerStats_playerId(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_teamId(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_leagueId(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_minutes(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Minutes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_appearences(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Appearences, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_lineups(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Lineups, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_substituteIn(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_substituteOut(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_substituteOnBench(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubstituteOnBench, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_goals(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Goals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_yellowCards(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.YellowCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_yellowred(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Yellowred, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_redCards(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RedCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerStats_type(ctx context.Context, field graphql.CollectedField, obj *PlayerStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var playerTransfersImplementors = []string{"PlayerTransfers"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PlayerTransfers(ctx context.Context, sel ast.SelectionSet, obj *PlayerTransfers) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerTransfersImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerTransfers")
		case "playerId":
			out.Values[i] = ec._PlayerTransfers_playerId(ctx, field, obj)
		case "toTeamId":
			out.Values[i] = ec._PlayerTransfers_toTeamId(ctx, field, obj)
		case "seasonId":
			out.Values[i] = ec._PlayerTransfers_seasonId(ctx, field, obj)
		case "transfer":
			out.Values[i] = ec._PlayerTransfers_transfer(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PlayerTransfers_type(ctx, field, obj)
		case "date":
			out.Values[i] = ec._PlayerTransfers_date(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._PlayerTransfers_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PlayerTransfers_playerId(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerTransfers_toTeamId(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ToTeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerTransfers_seasonId(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SeasonID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _PlayerTransfers_transfer(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Transfer, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _PlayerTransfers_type(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _PlayerTransfers_date(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Date, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _PlayerTransfers_amount(ctx context.Context, field graphql.CollectedField, obj *PlayerTransfers) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PlayerTransfers"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Amount, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var positionIncludeImplementors = []string{"PositionInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PositionInclude(ctx context.Context, sel ast.SelectionSet, obj *PositionInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, positionIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PositionInclude")
		case "position":
			out.Values[i] = ec._PositionInclude_position(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _PositionInclude_position(ctx context.Context, field graphql.CollectedField, obj *PositionInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "PositionInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Position, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PlayerPosition)
	return ec._PlayerPosition(ctx, field.Selections, &res)
}

var productImplementors = []string{"Product"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Product(ctx context.Context, sel ast.SelectionSet, obj *Product) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, productImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Product")
		case "id":
			out.Values[i] = ec._Product_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Product_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Product_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Product_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Product_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Product_description(ctx, field, obj)
		case "price":
			out.Values[i] = ec._Product_price(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Product_gender(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Product_image(ctx, field, obj)
		case "thumbnail":
			out.Values[i] = ec._Product_thumbnail(ctx, field, obj)
		case "collections":
			out.Values[i] = ec._Product_collections(ctx, field, obj)
		case "sizes":
			out.Values[i] = ec._Product_sizes(ctx, field, obj)
		case "categoryId":
			out.Values[i] = ec._Product_categoryId(ctx, field, obj)
		case "category":
			out.Values[i] = ec._Product_category(ctx, field, obj)
		case "kitCode":
			out.Values[i] = ec._Product_kitCode(ctx, field, obj)
		case "variations":
			out.Values[i] = ec._Product_variations(ctx, field, obj)
		case "brandId":
			out.Values[i] = ec._Product_brandId(ctx, field, obj)
		case "brand":
			out.Values[i] = ec._Product_brand(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._Product_leagueId(ctx, field, obj)
		case "teamID":
			out.Values[i] = ec._Product_teamID(ctx, field, obj)
		case "team":
			out.Values[i] = ec._Product_team(ctx, field, obj)
		case "playerId":
			out.Values[i] = ec._Product_playerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Product_id(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Product_createdAt(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Product_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Product_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _Product_name(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_description(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_price(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Price, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Product_gender(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Gender, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_image(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Image, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_thumbnail(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Thumbnail, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_collections(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Collections, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]CollectionM)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._CollectionM(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Product_sizes(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Sizes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]ProductSize)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._ProductSize(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Product_categoryId(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CategoryID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Product_category(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Category, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Category)
	if res == nil {
		return graphql.Null
	}
	return ec._Category(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_kitCode(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.KitCode, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Product_variations(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Variations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]ProductVariation)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._ProductVariation(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Product_brandId(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BrandID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Product_brand(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Brand, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Brand)
	if res == nil {
		return graphql.Null
	}
	return ec._Brand(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_leagueId(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Product_teamID(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Product_team(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Team, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TeamM)
	if res == nil {
		return graphql.Null
	}
	return ec._TeamM(ctx, field.Selections, res)
}

func (ec *executionContext) _Product_playerId(ctx context.Context, field graphql.CollectedField, obj *Product) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Product"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var productAttrsImplementors = []string{"ProductAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ProductAttrs(ctx context.Context, sel ast.SelectionSet, obj *ProductAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, productAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductAttrs")
		case "code":
			out.Values[i] = ec._ProductAttrs_code(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProductAttrs_name(ctx, field, obj)
		case "translationId":
			out.Values[i] = ec._ProductAttrs_translationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ProductAttrs_code(ctx context.Context, field graphql.CollectedField, obj *ProductAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Code, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ProductAttrs_name(ctx context.Context, field graphql.CollectedField, obj *ProductAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ProductAttrs_translationId(ctx context.Context, field graphql.CollectedField, obj *ProductAttrs) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductAttrs"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TranslationID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var productSizeImplementors = []string{"ProductSize"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ProductSize(ctx context.Context, sel ast.SelectionSet, obj *ProductSize) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, productSizeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductSize")
		case "createdAt":
			out.Values[i] = ec._ProductSize_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ProductSize_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._ProductSize_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ProductSize_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ProductSize_createdAt(ctx context.Context, field graphql.CollectedField, obj *ProductSize) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductSize"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductSize_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ProductSize) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductSize"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductSize_deletedAt(ctx context.Context, field graphql.CollectedField, obj *ProductSize) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductSize"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductSize_name(ctx context.Context, field graphql.CollectedField, obj *ProductSize) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductSize"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var productVariationImplementors = []string{"ProductVariation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ProductVariation(ctx context.Context, sel ast.SelectionSet, obj *ProductVariation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, productVariationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductVariation")
		case "id":
			out.Values[i] = ec._ProductVariation_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ProductVariation_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ProductVariation_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._ProductVariation_deletedAt(ctx, field, obj)
		case "productId":
			out.Values[i] = ec._ProductVariation_productId(ctx, field, obj)
		case "product":
			out.Values[i] = ec._ProductVariation_product(ctx, field, obj)
		case "badgeId":
			out.Values[i] = ec._ProductVariation_badgeId(ctx, field, obj)
		case "badge":
			out.Values[i] = ec._ProductVariation_badge(ctx, field, obj)
		case "sizeId":
			out.Values[i] = ec._ProductVariation_sizeId(ctx, field, obj)
		case "size":
			out.Values[i] = ec._ProductVariation_size(ctx, field, obj)
		case "SKU":
			out.Values[i] = ec._ProductVariation_SKU(ctx, field, obj)
		case "availableQuantity":
			out.Values[i] = ec._ProductVariation_availableQuantity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ProductVariation_id(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ProductVariation_createdAt(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductVariation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductVariation_deletedAt(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _ProductVariation_productId(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ProductID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ProductVariation_product(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Product, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Product)
	return ec._Product(ctx, field.Selections, &res)
}

func (ec *executionContext) _ProductVariation_badgeId(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BadgeID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _ProductVariation_badge(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Badge, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Badge)
	return ec._Badge(ctx, field.Selections, &res)
}

func (ec *executionContext) _ProductVariation_sizeId(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SizeID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ProductVariation_size(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Size, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(ProductSize)
	return ec._ProductSize(ctx, field.Selections, &res)
}

func (ec *executionContext) _ProductVariation_SKU(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SKU, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _ProductVariation_availableQuantity(ctx context.Context, field graphql.CollectedField, obj *ProductVariation) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ProductVariation"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.AvailableQuantity, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getLeague":
			out.Values[i] = ec._Query_getLeague(ctx, field)
		case "listSeasons":
			out.Values[i] = ec._Query_listSeasons(ctx, field)
		case "listTeamsBy":
			out.Values[i] = ec._Query_listTeamsBy(ctx, field)
		case "listFixturesBySeason":
			out.Values[i] = ec._Query_listFixturesBySeason(ctx, field)
		case "listFixturesBySeasonAndDate":
			out.Values[i] = ec._Query_listFixturesBySeasonAndDate(ctx, field)
		case "listFixturesBySeasonDateAndTeam":
			out.Values[i] = ec._Query_listFixturesBySeasonDateAndTeam(ctx, field)
		case "getTopscorers":
			out.Values[i] = ec._Query_getTopscorers(ctx, field)
		case "getStandings":
			out.Values[i] = ec._Query_getStandings(ctx, field)
		case "getStatsCalendar":
			out.Values[i] = ec._Query_getStatsCalendar(ctx, field)
		case "getStatsCalendarAll":
			out.Values[i] = ec._Query_getStatsCalendarAll(ctx, field)
		case "getFixture":
			out.Values[i] = ec._Query_getFixture(ctx, field)
		case "getTeamsGroupByCollectionCode":
			out.Values[i] = ec._Query_getTeamsGroupByCollectionCode(ctx, field)
		case "getBrands":
			out.Values[i] = ec._Query_getBrands(ctx, field)
		case "getProductSizes":
			out.Values[i] = ec._Query_getProductSizes(ctx, field)
		case "getProductKits":
			out.Values[i] = ec._Query_getProductKits(ctx, field)
		case "getProductGenders":
			out.Values[i] = ec._Query_getProductGenders(ctx, field)
		case "getCollections":
			out.Values[i] = ec._Query_getCollections(ctx, field)
		case "getProductDetails":
			out.Values[i] = ec._Query_getProductDetails(ctx, field)
		case "getProductVariations":
			out.Values[i] = ec._Query_getProductVariations(ctx, field)
		case "getProducts":
			out.Values[i] = ec._Query_getProducts(ctx, field)
		case "getProfileHistory":
			out.Values[i] = ec._Query_getProfileHistory(ctx, field)
		case "getProfileView":
			out.Values[i] = ec._Query_getProfileView(ctx, field)
		case "showCartContent":
			out.Values[i] = ec._Query_showCartContent(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_getLeague(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["leagueId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["leagueId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetLeague(ctx, args["leagueId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*League)
		if res == nil {
			return graphql.Null
		}
		return ec._League(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_listSeasons(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["competitionId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["competitionId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ListSeasons(ctx, args["competitionId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]FormSelection)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._FormSelection(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listTeamsBy(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ListTeamsBy(ctx, args["seasonId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Team)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Team(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listFixturesBySeason(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ListFixturesBySeason(ctx, args["seasonId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Fixture)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Fixture(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listFixturesBySeasonAndDate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["filterDate"]; ok {
		var err error
		arg1, err = graphql.UnmarshalTime(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["filterDate"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["teamId"]; ok {
		var err error
		arg2, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["teamId"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ListFixturesBySeasonAndDate(ctx, args["seasonId"].(int), args["filterDate"].(time.Time), args["teamId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Fixture)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Fixture(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_listFixturesBySeasonDateAndTeam(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["filterDate"]; ok {
		var err error
		arg1, err = graphql.UnmarshalTime(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["filterDate"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ListFixturesBySeasonDateAndTeam(ctx, args["seasonId"].(int), args["filterDate"].(time.Time))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Fixture)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Fixture(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getTopscorers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetTopscorers(ctx, args["seasonId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Topscorer)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Topscorer(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getStandings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetStandings(ctx, args["seasonId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Standing)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Standing(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getStatsCalendar(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["dateParam"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["dateParam"] = arg1
	var arg2 []int
	if tmp, ok := rawArgs["teamIds"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg2 = make([]int, len(rawIf1))
		for idx1 := range rawIf1 {
			arg2[idx1], err = graphql.UnmarshalInt(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["teamIds"] = arg2
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetStatsCalendar(ctx, args["seasonId"].(int), args["dateParam"].(string), args["teamIds"].([]int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(StatsCalendar)
		return ec._StatsCalendar(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getStatsCalendarAll(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dateParam"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["dateParam"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetStatsCalendarAll(ctx, args["dateParam"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(StatsCalendar)
		return ec._StatsCalendar(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getFixture(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["seasonId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["seasonId"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["fixtureId"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["fixtureId"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetFixture(ctx, args["seasonId"].(int), args["fixtureId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(FixtureAndEvents)
		return ec._FixtureAndEvents(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_getTeamsGroupByCollectionCode(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetTeamsGroupByCollectionCode(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*TeamArray)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._TeamArray(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getBrands(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetBrands(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Brand)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Brand(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProductSizes(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProductSizes(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ProductSize)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ProductSize(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProductKits(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProductKits(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ProductAttrs)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ProductAttrs(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProductGenders(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProductGenders(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ProductAttrs)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ProductAttrs(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getCollections(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["shopType"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["shopType"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetCollections(ctx, args["shopType"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]CollectionM)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._CollectionM(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProductDetails(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["productId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["productId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProductDetails(ctx, args["productId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Product)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Product(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProductVariations(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["productId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["productId"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProductVariations(ctx, args["productId"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ProductVariation)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ProductVariation(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProducts(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["collectionId"]; ok {
		var err error
		arg0, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["collectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["collectionCode"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["collectionCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["kitCode"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["kitCode"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["productSort"]; ok {
		var err error
		arg3, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["productSort"] = arg3
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProducts(ctx, args["collectionId"].(int), args["collectionCode"].(string), args["kitCode"].(string), args["productSort"].(string))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Product)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Product(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProfileHistory(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProfileHistory(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Order)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Order(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_getProfileView(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().GetProfileView(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(Address)
		return ec._Address(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_showCartContent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().ShowCartContent(ctx)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]ProductVariation)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ProductVariation(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

var roundImplementors = []string{"Round"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Round(ctx context.Context, sel ast.SelectionSet, obj *Round) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, roundImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Round")
		case "id":
			out.Values[i] = ec._Round_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Round_name(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._Round_leagueId(ctx, field, obj)
		case "seasonId":
			out.Values[i] = ec._Round_seasonId(ctx, field, obj)
		case "start":
			out.Values[i] = ec._Round_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._Round_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Round_id(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Round_name(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Round_leagueId(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Round_seasonId(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SeasonID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Round_start(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Start, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Round_end(ctx context.Context, field graphql.CollectedField, obj *Round) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Round"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.End, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var seasonImplementors = []string{"Season"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Season(ctx context.Context, sel ast.SelectionSet, obj *Season) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, seasonImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Season")
		case "id":
			out.Values[i] = ec._Season_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Season_name(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._Season_leagueId(ctx, field, obj)
		case "stageData":
			out.Values[i] = ec._Season_stageData(ctx, field, obj)
		case "roundsData":
			out.Values[i] = ec._Season_roundsData(ctx, field, obj)
		case "fixturesInclude":
			out.Values[i] = ec._Season_fixturesInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Season_id(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Season"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Season_name(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Season"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Season_leagueId(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Season"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Season_stageData(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Season",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Season().StageData(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Stage)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Stage(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Season_roundsData(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Season",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Season().RoundsData(ctx, obj)
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Round)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Round(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Season_fixturesInclude(ctx context.Context, field graphql.CollectedField, obj *Season) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["orderBy"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		var err error
		arg1, err = graphql.UnmarshalInt(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limit"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Season",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Season().FixturesInclude(ctx, obj, args["orderBy"].(string), args["limit"].(int))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Fixture)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Fixture(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

var seasonsRootImplementors = []string{"SeasonsRoot"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _SeasonsRoot(ctx context.Context, sel ast.SelectionSet, obj *SeasonsRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, seasonsRootImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SeasonsRoot")
		case "seasons":
			out.Values[i] = ec._SeasonsRoot_seasons(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _SeasonsRoot_seasons(ctx context.Context, field graphql.CollectedField, obj *SeasonsRoot) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SeasonsRoot"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Seasons, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]Season)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Season(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var shotsImplementors = []string{"Shots"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Shots(ctx context.Context, sel ast.SelectionSet, obj *Shots) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, shotsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Shots")
		case "shotsTotal":
			out.Values[i] = ec._Shots_shotsTotal(ctx, field, obj)
		case "shotsOnGoal":
			out.Values[i] = ec._Shots_shotsOnGoal(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Shots_shotsTotal(ctx context.Context, field graphql.CollectedField, obj *Shots) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Shots"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShotsTotal, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Shots_shotsOnGoal(ctx context.Context, field graphql.CollectedField, obj *Shots) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Shots"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShotsOnGoal, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var squadRootImplementors = []string{"SquadRoot"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _SquadRoot(ctx context.Context, sel ast.SelectionSet, obj *SquadRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, squadRootImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SquadRoot")
		case "players":
			out.Values[i] = ec._SquadRoot_players(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _SquadRoot_players(ctx context.Context, field graphql.CollectedField, obj *SquadRoot) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SquadRoot"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Players, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]PlayerSquadStats)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._PlayerSquadStats(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var stageImplementors = []string{"Stage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Stage(ctx context.Context, sel ast.SelectionSet, obj *Stage) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, stageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Stage")
		case "id":
			out.Values[i] = ec._Stage_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Stage_name(ctx, field, obj)
		case "leagueId":
			out.Values[i] = ec._Stage_leagueId(ctx, field, obj)
		case "seasonId":
			out.Values[i] = ec._Stage_seasonId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Stage_id(ctx context.Context, field graphql.CollectedField, obj *Stage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Stage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Stage_name(ctx context.Context, field graphql.CollectedField, obj *Stage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Stage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Stage_leagueId(ctx context.Context, field graphql.CollectedField, obj *Stage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Stage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeagueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Stage_seasonId(ctx context.Context, field graphql.CollectedField, obj *Stage) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Stage"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SeasonID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var standingImplementors = []string{"Standing"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Standing(ctx context.Context, sel ast.SelectionSet, obj *Standing) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, standingImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Standing")
		case "position":
			out.Values[i] = ec._Standing_position(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._Standing_teamId(ctx, field, obj)
		case "teamName":
			out.Values[i] = ec._Standing_teamName(ctx, field, obj)
		case "groupId":
			out.Values[i] = ec._Standing_groupId(ctx, field, obj)
		case "groupName":
			out.Values[i] = ec._Standing_groupName(ctx, field, obj)
		case "overall":
			out.Values[i] = ec._Standing_overall(ctx, field, obj)
		case "home":
			out.Values[i] = ec._Standing_home(ctx, field, obj)
		case "away":
			out.Values[i] = ec._Standing_away(ctx, field, obj)
		case "total":
			out.Values[i] = ec._Standing_total(ctx, field, obj)
		case "result":
			out.Values[i] = ec._Standing_result(ctx, field, obj)
		case "points":
			out.Values[i] = ec._Standing_points(ctx, field, obj)
		case "recentForm":
			out.Values[i] = ec._Standing_recentForm(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Standing_status(ctx, field, obj)
		case "teamInclude":
			out.Values[i] = ec._Standing_teamInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Standing_position(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Position, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Standing_teamId(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Standing_teamName(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Standing_groupId(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GroupID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Standing_groupName(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GroupName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Standing_overall(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Overall, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(StandingStats)
	return ec._StandingStats(ctx, field.Selections, &res)
}

func (ec *executionContext) _Standing_home(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Home, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(StandingStats)
	return ec._StandingStats(ctx, field.Selections, &res)
}

func (ec *executionContext) _Standing_away(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Away, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(StandingStats)
	return ec._StandingStats(ctx, field.Selections, &res)
}

func (ec *executionContext) _Standing_total(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Total, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Total)
	return ec._Total(ctx, field.Selections, &res)
}

func (ec *executionContext) _Standing_result(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Result, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Standing_points(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Points, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Standing_recentForm(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RecentForm, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Standing_status(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Standing_teamInclude(ctx context.Context, field graphql.CollectedField, obj *Standing) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Standing"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(TeamInclude)
	return ec._TeamInclude(ctx, field.Selections, &res)
}

var standingStatsImplementors = []string{"StandingStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StandingStats(ctx context.Context, sel ast.SelectionSet, obj *StandingStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, standingStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StandingStats")
		case "gamesPlayed":
			out.Values[i] = ec._StandingStats_gamesPlayed(ctx, field, obj)
		case "won":
			out.Values[i] = ec._StandingStats_won(ctx, field, obj)
		case "draw":
			out.Values[i] = ec._StandingStats_draw(ctx, field, obj)
		case "lost":
			out.Values[i] = ec._StandingStats_lost(ctx, field, obj)
		case "goalsScored":
			out.Values[i] = ec._StandingStats_goalsScored(ctx, field, obj)
		case "goalsAgainst":
			out.Values[i] = ec._StandingStats_goalsAgainst(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StandingStats_gamesPlayed(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GamesPlayed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StandingStats_won(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Won, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StandingStats_draw(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Draw, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StandingStats_lost(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Lost, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StandingStats_goalsScored(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GoalsScored, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StandingStats_goalsAgainst(ctx context.Context, field graphql.CollectedField, obj *StandingStats) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StandingStats"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.GoalsAgainst, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var startingAtImplementors = []string{"StartingAt"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StartingAt(ctx context.Context, sel ast.SelectionSet, obj *StartingAt) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, startingAtImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StartingAt")
		case "key":
			out.Values[i] = ec._StartingAt_key(ctx, field, obj)
		case "value":
			out.Values[i] = ec._StartingAt_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StartingAt_key(ctx context.Context, field graphql.CollectedField, obj *StartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _StartingAt_value(ctx context.Context, field graphql.CollectedField, obj *StartingAt) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StartingAt"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var statsCalendarImplementors = []string{"StatsCalendar"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StatsCalendar(ctx context.Context, sel ast.SelectionSet, obj *StatsCalendar) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, statsCalendarImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatsCalendar")
		case "dateParameter":
			out.Values[i] = ec._StatsCalendar_dateParameter(ctx, field, obj)
		case "dateParameterTime":
			out.Values[i] = ec._StatsCalendar_dateParameterTime(ctx, field, obj)
		case "entries":
			out.Values[i] = ec._StatsCalendar_entries(ctx, field, obj)
		case "todayOrNextIdx":
			out.Values[i] = ec._StatsCalendar_todayOrNextIdx(ctx, field, obj)
		case "count":
			out.Values[i] = ec._StatsCalendar_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StatsCalendar_dateParameter(ctx context.Context, field graphql.CollectedField, obj *StatsCalendar) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendar"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DateParameter, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _StatsCalendar_dateParameterTime(ctx context.Context, field graphql.CollectedField, obj *StatsCalendar) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendar"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DateParameterTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _StatsCalendar_entries(ctx context.Context, field graphql.CollectedField, obj *StatsCalendar) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendar"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Entries, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]StatsCalendarEntry)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._StatsCalendarEntry(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _StatsCalendar_todayOrNextIdx(ctx context.Context, field graphql.CollectedField, obj *StatsCalendar) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendar"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TodayOrNextIdx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _StatsCalendar_count(ctx context.Context, field graphql.CollectedField, obj *StatsCalendar) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendar"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Count, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var statsCalendarEntryImplementors = []string{"StatsCalendarEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StatsCalendarEntry(ctx context.Context, sel ast.SelectionSet, obj *StatsCalendarEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, statsCalendarEntryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatsCalendarEntry")
		case "dateTime":
			out.Values[i] = ec._StatsCalendarEntry_dateTime(ctx, field, obj)
		case "nextOrToday":
			out.Values[i] = ec._StatsCalendarEntry_nextOrToday(ctx, field, obj)
		case "idx":
			out.Values[i] = ec._StatsCalendarEntry_idx(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StatsCalendarEntry_dateTime(ctx context.Context, field graphql.CollectedField, obj *StatsCalendarEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendarEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DateTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _StatsCalendarEntry_nextOrToday(ctx context.Context, field graphql.CollectedField, obj *StatsCalendarEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendarEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NextOrToday, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _StatsCalendarEntry_idx(ctx context.Context, field graphql.CollectedField, obj *StatsCalendarEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsCalendarEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Idx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var statsIncludeImplementors = []string{"StatsInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StatsInclude(ctx context.Context, sel ast.SelectionSet, obj *StatsInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, statsIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatsInclude")
		case "stats":
			out.Values[i] = ec._StatsInclude_stats(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StatsInclude_stats(ctx context.Context, field graphql.CollectedField, obj *StatsInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StatsInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Stats, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PlayerStats)
	return ec._PlayerStats(ctx, field.Selections, &res)
}

var teamImplementors = []string{"Team"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Team(ctx context.Context, sel ast.SelectionSet, obj *Team) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, teamImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Team")
		case "id":
			out.Values[i] = ec._Team_id(ctx, field, obj)
		case "legacyId":
			out.Values[i] = ec._Team_legacyId(ctx, field, obj)
		case "countryId":
			out.Values[i] = ec._Team_countryId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Team_name(ctx, field, obj)
		case "shortCode":
			out.Values[i] = ec._Team_shortCode(ctx, field, obj)
		case "nationalTeam":
			out.Values[i] = ec._Team_nationalTeam(ctx, field, obj)
		case "founded":
			out.Values[i] = ec._Team_founded(ctx, field, obj)
		case "logoPath":
			out.Values[i] = ec._Team_logoPath(ctx, field, obj)
		case "venueId":
			out.Values[i] = ec._Team_venueId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Team_id(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Team_legacyId(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LegacyID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Team_countryId(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CountryID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Team_name(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Team_shortCode(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ShortCode, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Team_nationalTeam(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.NationalTeam, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Team_founded(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Founded, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Team_logoPath(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LogoPath, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Team_venueId(ctx context.Context, field graphql.CollectedField, obj *Team) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Team"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VenueID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var teamArrayImplementors = []string{"TeamArray"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TeamArray(ctx context.Context, sel ast.SelectionSet, obj *TeamArray) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, teamArrayImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamArray")
		case "key":
			out.Values[i] = ec._TeamArray_key(ctx, field, obj)
		case "value":
			out.Values[i] = ec._TeamArray_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TeamArray_key(ctx context.Context, field graphql.CollectedField, obj *TeamArray) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamArray"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _TeamArray_value(ctx context.Context, field graphql.CollectedField, obj *TeamArray) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamArray"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]TeamM)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._TeamM(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var teamIncludeImplementors = []string{"TeamInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TeamInclude(ctx context.Context, sel ast.SelectionSet, obj *TeamInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, teamIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamInclude")
		case "team":
			out.Values[i] = ec._TeamInclude_team(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TeamInclude_team(ctx context.Context, field graphql.CollectedField, obj *TeamInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Team, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Team)
	return ec._Team(ctx, field.Selections, &res)
}

var teamMImplementors = []string{"TeamM"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TeamM(ctx context.Context, sel ast.SelectionSet, obj *TeamM) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, teamMImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeamM")
		case "createdAt":
			out.Values[i] = ec._TeamM_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._TeamM_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._TeamM_deletedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TeamM_name(ctx, field, obj)
		case "leaguesM":
			out.Values[i] = ec._TeamM_leaguesM(ctx, field, obj)
		case "collections":
			out.Values[i] = ec._TeamM_collections(ctx, field, obj)
		case "brandID":
			out.Values[i] = ec._TeamM_brandID(ctx, field, obj)
		case "brand":
			out.Values[i] = ec._TeamM_brand(ctx, field, obj)
		case "logo":
			out.Values[i] = ec._TeamM_logo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TeamM_createdAt(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _TeamM_updatedAt(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _TeamM_deletedAt(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _TeamM_name(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _TeamM_leaguesM(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LeaguesM, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]LeagueM)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._LeagueM(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _TeamM_collections(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Collections, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]CollectionM)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._CollectionM(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _TeamM_brandID(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BrandID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _TeamM_brand(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Brand, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Brand)
	return ec._Brand(ctx, field.Selections, &res)
}

func (ec *executionContext) _TeamM_logo(ctx context.Context, field graphql.CollectedField, obj *TeamM) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TeamM"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Logo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var topscorerImplementors = []string{"Topscorer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Topscorer(ctx context.Context, sel ast.SelectionSet, obj *Topscorer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, topscorerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topscorer")
		case "position":
			out.Values[i] = ec._Topscorer_position(ctx, field, obj)
		case "playerId":
			out.Values[i] = ec._Topscorer_playerId(ctx, field, obj)
		case "teamId":
			out.Values[i] = ec._Topscorer_teamId(ctx, field, obj)
		case "stageId":
			out.Values[i] = ec._Topscorer_stageId(ctx, field, obj)
		case "goals":
			out.Values[i] = ec._Topscorer_goals(ctx, field, obj)
		case "penaltyGoals":
			out.Values[i] = ec._Topscorer_penaltyGoals(ctx, field, obj)
		case "playerInclude":
			out.Values[i] = ec._Topscorer_playerInclude(ctx, field, obj)
		case "teamInclude":
			out.Values[i] = ec._Topscorer_teamInclude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Topscorer_position(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Position, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_playerId(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_teamId(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_stageId(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.StageID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_goals(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Goals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_penaltyGoals(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PenaltyGoals, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Topscorer_playerInclude(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PlayerInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PlayerInclude)
	return ec._PlayerInclude(ctx, field.Selections, &res)
}

func (ec *executionContext) _Topscorer_teamInclude(ctx context.Context, field graphql.CollectedField, obj *Topscorer) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Topscorer"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.TeamInclude, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(TeamInclude)
	return ec._TeamInclude(ctx, field.Selections, &res)
}

var totalImplementors = []string{"Total"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Total(ctx context.Context, sel ast.SelectionSet, obj *Total) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, totalImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Total")
		case "points":
			out.Values[i] = ec._Total_points(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Total_points(ctx context.Context, field graphql.CollectedField, obj *Total) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Total"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Points, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

var transfersIncludeImplementors = []string{"TransfersInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TransfersInclude(ctx context.Context, sel ast.SelectionSet, obj *TransfersInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, transfersIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransfersInclude")
		case "transfers":
			out.Values[i] = ec._TransfersInclude_transfers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _TransfersInclude_transfers(ctx context.Context, field graphql.CollectedField, obj *TransfersInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "TransfersInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Transfers, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(PlayerTransfers)
	return ec._PlayerTransfers(ctx, field.Selections, &res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "ID":
			out.Values[i] = ec._User_ID(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._User_deletedAt(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "firebaseI":
			out.Values[i] = ec._User_firebaseI(ctx, field, obj)
		case "userAccessLevel":
			out.Values[i] = ec._User_userAccessLevel(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._User_telephone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _User_ID(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _User_deletedAt(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeletedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Email, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_firebaseI(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FirebaseI, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_userAccessLevel(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.UserAccessLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _User_telephone(ctx context.Context, field graphql.CollectedField, obj *User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Telephone, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var visitorTeamIncludeImplementors = []string{"VisitorTeamInclude"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _VisitorTeamInclude(ctx context.Context, sel ast.SelectionSet, obj *VisitorTeamInclude) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, visitorTeamIncludeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VisitorTeamInclude")
		case "visitorTeam":
			out.Values[i] = ec._VisitorTeamInclude_visitorTeam(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _VisitorTeamInclude_visitorTeam(ctx context.Context, field graphql.CollectedField, obj *VisitorTeamInclude) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "VisitorTeamInclude"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.VisitorTeam, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Team)
	return ec._Team(ctx, field.Selections, &res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var playerRootImplementors = []string{"playerRoot"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _playerRoot(ctx context.Context, sel ast.SelectionSet, obj *PlayerRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, playerRootImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("playerRoot")
		case "player":
			out.Values[i] = ec._playerRoot_player(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _playerRoot_player(ctx context.Context, field graphql.CollectedField, obj *PlayerRoot) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "playerRoot"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Player, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Player)
	return ec._Player(ctx, field.Selections, &res)
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, next graphql.Resolver) interface{} {
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `# League
type League {
	id: Int!
	legacyId: Int!
	countryId: Int!
	name: String!
	isCup: Boolean!
	currentSeasonId: Int!
	currentRoundId: Int!
	currentStageId: Int!
	liveStandings: Boolean!
	coverage: Coverage!
	seasonsInclude(orderBy: String!, limit: Int!): SeasonsRoot
}


type Coverage {
    topscorerGoals: Boolean!
    topscorerAssists: Boolean!
    topscorerCards: Boolean!
}

type SeasonsRoot {
	seasons: [Season!]! 
}

# Season
type Season {
    id: Int!
    name: String!
    leagueId: Int!
    stageData: [Stage!]!
    roundsData: [Round!]!
    fixturesInclude(orderBy: String!, limit: Int!): [Fixture!]!
}

type FormSelection {
	name: String!
	id: Int!
	href: String!
}

type Stage {
    id: Int!
    name: String!
    leagueId: Int!
    seasonId: Int! 
}

type Round {
    id: Int!
    name: String!
    leagueId: Int!
    seasonId: Int!
    start: String!
    end: String!
}

type Fixture {
    id: Int!
    leagueId: Int!
    seasonId: Int!
    stageId: Int!
    roundId: Int!
    groupId: Int!
    venueId: Int!
    localTeamId: Int!
    visitorTeamId: Int!
    formation: FixtureFormation!
    scores: FixtureScore!
    time: FixtureTime!
    coaches: FixtureCoaches!
    standings: FixtureStandings!
    deleted: Boolean!
    localTeamInclude: LocalTeamInclude!
    visitorTeamInclude: VisitorTeamInclude!
    eventsInclude: EventsInclude!
    lineupInclude: LineupInclude!	
}

type FixtureFormation {
	localTeamFormation:  String!
	visitorTeamFormation: String!
} 

type FixtureScore {
	localTeamScore: Int!
	visitorTeamScore: Int!
	localTeamScorePen: Int!
	visitorTeamScorePen: Int!
	halfTimeScore: String!
	fullTimeScore: String!
	extraTimeScore: String!
}

type FixtureCoaches {
	localTeamCoachId: Int!
	visitorTeamCoachId: Int!
}
type FixtureStandings {
	localTeamPosition: Int!
	visitorTeamPosition: Int!
}
type FixtureStartingAt {
    dateTime: String!
    date: String!
    time: String!
    timestamp: Int!
    timezone: String!
}
type FixtureTime {
	status:     String!
	startingAt: FixtureStartingAt!
    minute: Int!
    second: Int!
    addedTime: Int!
    extraTime: Int!
    injuryTime: Int!
}

type StartingAt {
	key: String!
	value: String!
}

# team
type Team { 
    id: Int!
    legacyId: Int!
    countryId: Int!
    name: String!
    shortCode: String!
    nationalTeam: Boolean!
    founded: Int!
    logoPath: String!
    venueId: Int!	
}

type LocalTeamInclude {
	localTeam: Team!
}

type VisitorTeamInclude {
	visitorTeam: Team!
} 

type EventsInclude {
	events: [FixtureEvent!]!
} 

type LineupInclude {
	players: [FixturePlayer!]!
}

type FixtureEvent {
	id: Int!
	teamId: String!
	type:   String!
	fixtureId: Int!
	playerId: Int!
	playerName: String!
	relatedPlayerId: Int!
	relatedPlayerName: String!
	minute: Int!
	extraMinute:Int!
	reason: String!
	injuried: Boolean!
	result: String!
} 

type FixturePlayer {
	teamId: Int!
	fixtureId: Int!
	playerId: Int!
	playerName: Int!
	number: Int!
	position: String!
	formationPosition: Int!
	posX: Int!
	posY: Int!
	stats: FixturePlayerStats!
}

type FixturePlayerStats {
	shorts: Shots!
	goals: Goals!
	fouls: Fouls!
	cards: Cards!
	passing: Passing!
	other: Other!	
}

type Shots {
	shotsTotal:	Int!
	shotsOnGoal: Int!
} 

type Goals {
	scored:	Int!
	conceded: Int!
}

type Fouls {
	drawn:	Int!
	comitted: Int!
}

type Cards {
	yellowCards: Int!
	redCards: Int!
}

type Passing {
	totalCrosses: Int!
	crossesAccuracy: Int!
	passes: Int!
	passesAccuracy: Int! 
}

type Other {
	assists: Int!
	offsides: Int!
	saves: Int!
	penScored: Int!
	penMissed: Int!
	penSaved: Int!
	penCommitted: Int!
	penWon: Int!
	hitWoodwork: Int!
	tackles: Int!
	blocks: Int!
	interceptions: Int!
	clearances: Int!
	minutesPlayed: Int!
} 

# GetTopscorer
type Topscorer {
	position: Int!
	playerId: Int!
	teamId: Int!
	stageId: Int!
	goals: Int!
	penaltyGoals: Int!	
	playerInclude: PlayerInclude!
	teamInclude: TeamInclude!	
}

type TeamInclude {
	team: Team !
} 

# standing
type StandingStats {
	gamesPlayed: Int!
	won: Int!
	draw: Int!
	lost: Int!
	goalsScored: Int!
	goalsAgainst: Int!
}
type Standing {
	position: Int!
	teamId: Int!
	teamName: String!
	groupId: Int!
	groupName: String!
	overall: StandingStats!
	home: StandingStats!
	away: StandingStats!
	total: Total!
	result: String!
	points: Int!
	recentForm: String!
	status: String!
	teamInclude: TeamInclude!
}

type Total {	
	points: Int!
}
#player 

type Player {
	playerId: Int!
	teamId: Int!  
	countryId: Int!
	positionId: Int!
	commonName: String!
	fullName: String!
	firstName: String!
	lastName: String!
	nationality: String!
	birthdate: String!
	birthcountry: String!
	birthplace: String!
	height: String!
	weight: String!
	imagePath: String!
	teamInclude: TeamInclude!
	statsInclude: StatsInclude!
	transfersInclude: TransfersInclude!	
}


type PlayerInclude {
	player: Player!
} 

type StatsInclude {
	stats: PlayerStats!
} 

type TransfersInclude {
	transfers: PlayerTransfers!
}

type PlayerStats {
	playerId: Int!
	teamId: Int!
	leagueId: Int!
	minutes: Int!
	appearences: Int!
	lineups: Int!
	substituteIn: Int!
	substituteOut: Int!
	substituteOnBench: Int!
	goals: Int!
	yellowCards: Int!
	yellowred: Int!
	redCards: Int!
	type: String!
}

type PlayerTransfers {
	playerId: Int!
	toTeamId: Int!
	seasonId: Int!
	transfer: String!
	type: String!
	date: String!
	amount: String!
}

type playerRoot {
	player: Player!
}

type PlayerSquadStats {
	playerId: Int!
	teamId: Int!
	leagueId: Int!
	minutes: Int!
	appearences: Int!
	lineups: Int!
	substituteIn: Int!
	substituteOut: Int!
	substituteOnBench: Int!
	goals: Int!
	yellowCards: Int!
	yellowred: Int!
	redCards: Int!
	type: String!
	playerInclude: PlayerInclude!
	positionInclude: PositionInclude!
}

type PositionInclude {
	position: PlayerPosition!
}

type PlayerPosition {
	id: Int!
	name: String!
}

type SquadRoot {
	players: [PlayerSquadStats!]!
}

# calendar 
type StatsCalendar {
	dateParameter: String!
	dateParameterTime: Time!
	entries: [StatsCalendarEntry!]!
	todayOrNextIdx: Int!
	count: Int!
}
type StatsCalendarEntry {
	dateTime: Time
	nextOrToday: Boolean!
	idx: Int!
}

# GetFixtures
type FixtureAndEvents {
	fixture: Fixture
	events: Events
}

type FixtureEventArray {
	key:String!
	value:[FixtureEvent!]!
}

type Events {
	localTeamEvents:   [FixtureEventArray]!
	visitorTeamEvents: [FixtureEventArray]!
}
##########################    shop   ########################
type LeagueM {
	league: League!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
}

type CollectionM {
	name: String!
	code: String!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
}

type TeamM {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time

	name: String!
	leaguesM: [LeagueM!]!
	collections: [CollectionM!]!
	brandID: Int!
	brand: Brand!
	logo: String!
}

type TeamArray {
	key: String!
	value: [TeamM!]!
}

type Brand {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	name: String!
}

type ProductSize {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	name: String!
}

type ProductAttrs {
	code: String!        
	name: String!          
	translationId: String!
}

type ProductVariation {
	id: Int!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	productId: Int!
	product: Product!
	badgeId: Int
	badge: Badge!
	sizeId: Int!
	size: ProductSize!
	SKU: String!
	availableQuantity: Int!
}


type Badge {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	name: String!
	image: String!
	thumbnail: String!
	price: Float!
}

type Category {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	name: String!
	code: String!
}

type Product {
	id: Int!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	name: String!
	description: String!
	price: Float!
	gender: String!
	image: String!
	thumbnail: String!
	collections:  [CollectionM!]!
	sizes: [ProductSize!]!
	categoryId: Int!
	category: Category 
	kitCode: String!
	variations: [ProductVariation!]!
	brandId: Int!
	brand: Brand
	leagueId: Int!
	teamID: Int!
	team: TeamM
	playerId: Int!
}
# profile

type Order {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	reference: String!
	userId: Int	user: User!
	email: String!
	paymentAmount: Float!
	abandonedReason: String!
	discountValue: Int!
	trackingNumber: String!
	shippedAt: Time
	returnedAt: Time
	cancelledAt: Time
	shippingAddressId: Int!
#	shippingAddress: Address!
	paymentMethod: String!
	shippingMethod: String!
	subtotal: Float!
	VAT: Float!
	shippingCost: Float!
	total: Float!
	notes: String!
	orderItems: [OrderItem!]!	
}

type User {
	ID: Int!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	email: String!
	firebaseI: String!
	userAccessLevel: Int!
	telephone: String!
}

type OrderItem {
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	orderId: Int!
	productVariationId: Int!
	productVariation: ProductVariation!
	persistProductDetailsJSON: String!
	customizedName: String!
	customizedNumber: Int!
	quantity: Int!
	price: Float!
	discountRate: Int!	
}

type Address {
	ID: Int!
	createdAt: Time
	updatedAt: Time
	deletedAt: Time
	userId: Int
	contactName: String!
	telephone: String!
	city: String!
	country: String!
	addressLine1: String!
	addressLine2: String!
	postalCode: String!
	notes: String!
}

# query
type Query {
    getLeague(leagueId: Int!): League
#	fixturesInclude(orderBy: String!, limit: Int!): [Fixture!]!
#	seasonsInclude(orderBy: String!, limit: Int!): [Season!]!
	listSeasons(competitionId: Int!): [FormSelection!]!
	listTeamsBy(seasonId: Int!): [Team!]!
	listFixturesBySeason(seasonId: Int!): [Fixture!]!
	listFixturesBySeasonAndDate(seasonId: Int!, filterDate: Time!, teamId: Int!): [Fixture!]!
	listFixturesBySeasonDateAndTeam(seasonId: Int!, filterDate: Time!): [Fixture!]!	
	getTopscorers(seasonId: Int!): [Topscorer!]!
	getStandings(seasonId: Int!): [Standing!]!
	getStatsCalendar(seasonId: Int!, dateParam: String!, teamIds: [Int!]!): StatsCalendar!
	getStatsCalendarAll(dateParam: String!):StatsCalendar!
	getFixture(seasonId: Int!, fixtureId: Int!): FixtureAndEvents!
	getTeamsGroupByCollectionCode(): [TeamArray]!
	getBrands(): [Brand!]!
	getProductSizes(): [ProductSize!]!
	getProductKits(): [ProductAttrs!]!
	getProductGenders(): [ProductAttrs!]!
	getCollections(shopType: String!): [CollectionM!]!
	getProductDetails(productId: Int!): [Product!]!
	getProductVariations(productId: Int!):[ProductVariation!]!
	getProducts(collectionId: Int!, collectionCode: String!, kitCode: String!, productSort: String!): [Product!]!
	getProfileHistory(): [Order!]!
	getProfileView(): Address!
	showCartContent(): [ProductVariation!]!	
}

scalar Time
scalar Map


`},
)
