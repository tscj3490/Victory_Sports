/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var UserAccessLevels = exports.UserAccessLevels = [{ value: 10, label: 'Anonymous' }, { value: 50, label: 'User' }, { value: 100, label: 'Admin' }];
var ProductGender = exports.ProductGender = [{ value: 'male', label: 'Male' }, { value: 'female', label: 'Female' }, { value: 'youth', label: 'Youth' }, { value: 'unisex', label: 'Unisex' }];
var ProductSizes = exports.ProductSizes = [{ value: "S", label: 'S' }, { value: "M", label: 'M' }, { value: "L", label: 'L' }, { value: "XL", label: 'XL' }, { value: "XXL", label: 'XXL' }];
var ProductBrands = exports.ProductBrands = [{ value: "Adidas", label: 'Adidas' }, { value: "Nike", label: 'Nike' }, { value: "Puma", label: 'Puma' }, { value: "New Balance", label: 'New Balance' }, { value: "Uhl Sport", label: 'Uhl Sport' }, { value: "Umbro", label: 'Umbro' }, { value: "Arena", label: 'Arena' }];
var ProductCollections = exports.ProductCollections = [{ value: 'uaeleague', label: 'UAE League' }, { value: 'laliga', label: 'La Liga' }, { value: 'bundesliga', label: 'Bundesliga' }, { value: 'ligue1', label: 'Ligue 1' }, { value: 'premierleague', label: 'Premier League' }, { value: 'seriea', label: 'Serie A' }, { value: 'worldcup', label: 'WorldCup' }, { value: 'worldcup2018', label: 'WorldCup2018' }, { value: 'europe', label: 'Europe' }, { value: 'africa', label: 'Africa' }, { value: 'asia', label: 'Asia' }, { value: 'southamerica', label: 'South America' }, { value: 'northcentralamericaandcarribean', label: 'North, Central America and Carribean' }, { value: 'featuredplayers', label: 'Featured Players' }, { value: 'merchandise', label: 'Merchandise' }, { value: 'clubs', label: 'Clubs' }, { value: 'featuredproducts', label: 'Featured Products' }, { value: 'whatsnew', label: 'Whats New' }, { value: 'bestsellers', label: 'Best Sellers' }];
var ProductKits = exports.ProductKits = [{ value: 'homekit', label: 'Home Kit' }, { value: 'awaykit', label: 'Away Kit' }, { value: 'thirdkit', label: 'Third Kit' }, { value: 'goalkeeperkit', label: 'Goalkeeper Kit' }, { value: 'accessories', label: 'Accessories' }];
var StatsBuyButtonStates = exports.StatsBuyButtonStates = [{ value: 2, label: 'enabled' }, { value: 3, label: 'disabled' }];

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toArray = toArray;
exports.mapExtractArrayField = mapExtractArrayField;
exports.mapExtractField = mapExtractField;
exports.mapExtractEntryField = mapExtractEntryField;
function toArray(array) {
    return Array.prototype.slice.call(array);
}
function mapExtractArrayField(fieldName) {
    return function (value, entry) {
        var resp = [];
        value.forEach(function (obj) {
            resp.push(obj[fieldName]);
        });
        return resp;
    };
}
function mapExtractField(fieldName) {
    return function (value, entry) {
        return value[fieldName];
    };
}
function mapExtractEntryField(fieldName) {
    return function (value, entry) {
        return entry[fieldName];
    };
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _uploaderNgadmin = __webpack_require__(3);

var _adminData = __webpack_require__(0);

var _adminBadges = __webpack_require__(4);

var _adminProducts = __webpack_require__(5);

var _adminUsers = __webpack_require__(6);

var _adminLeagues = __webpack_require__(7);

var _adminTeams = __webpack_require__(8);

var _adminVariations = __webpack_require__(9);

var _adminSportmonks = __webpack_require__(10);

var _adminOrders = __webpack_require__(11);

/*global angular*/

var myApp = angular.module('myApp', ['ng-admin']);

myApp.directive('uploader', _uploaderNgadmin.uploader);

myApp.config(['NgAdminConfigurationProvider', function (nga) {
    // create an admin application
    var admin = nga.application('Victory Admin').debug(true).baseApiUrl('/admin/'); // main API endpoint

    // create a user entity
    // the API endpoint for this entity will be 'http://jsonplaceholder.typicode.com/users/:id
    var users = nga.entity('users').identifier(nga.field('ID'));
    var leagues = nga.entity('leagues').identifier(nga.field('ID'));
    var teams = nga.entity('teams').identifier(nga.field('ID'));
    var products = nga.entity('products').identifier(nga.field('ID'));
    var collections = nga.entity('collections').identifier(nga.field('ID'));
    var variations = nga.entity('variations').identifier(nga.field('ID'));
    var badges = nga.entity('badges').identifier(nga.field('ID'));
    var sportmonksTeams = nga.entity('sportmonksTeams').label('Sportmonks Teams').baseApiUrl('sportmonks/').identifier(nga.field('combinedLeagueSeasonTeamId'));
    var orders = nga.entity('orders').identifier(nga.field('ID'));
    admin.addEntity(users).addEntity(products).addEntity(variations).addEntity(badges).addEntity(collections).addEntity(teams).addEntity(leagues).addEntity(sportmonksTeams).addEntity(orders);

    var allEntities = {
        users: users,
        leagues: leagues,
        teams: teams,
        products: products,
        variations: variations,
        badges: badges,
        collections: collections,
        sportmonksTeams: sportmonksTeams,
        orders: orders
    };
    (0, _adminProducts.NGAdminProducts)(nga, allEntities);
    (0, _adminUsers.NGAdminUsers)(nga, allEntities);
    (0, _adminLeagues.NGAdminLeagues)(nga, allEntities);
    (0, _adminTeams.NGAdminTeams)(nga, allEntities);
    (0, _adminBadges.NGAdminBadges)(nga, allEntities);
    (0, _adminVariations.NGAdminProductVariations)(nga, allEntities);
    (0, _adminSportmonks.NGAdminSportmonks)(nga, allEntities);
    (0, _adminOrders.NGAdminOrders)(nga, allEntities);

    // attach the admin application to the DOM and execute it
    nga.configure(admin);
}]);

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*global angular*/
exports.uploader = ['$http', '$q', 'notification', '$state', function ($http, $q, notification, $state) {
				return {
								restrict: 'E',
								scope: {
												prefix: '&',
												suffix: '&'
								},
								link: function link($scope) {
												$scope.uploaded = false;

												$scope.onFileSelect = function ($files) {
																if (!$files || !$files.length) return;
																$scope.file = $files[0];
												};
												$scope.upload = function () {
																if (!$scope.file) return;

																// let pattern = /^#\/[a-zA-Z0-9\-_]+\/(edit|show)\/([0-9a-fA-F]+)$/;
																// let data = location.hash.match(pattern);
																// if (!data) return alert("Unable to detect the entry ID");

																// let id = data[2];
																// let id = generatePushID();
																var URL = $scope.prefix(); // + id + $scope.suffix();

																var fd = new FormData();
																fd.append('file', $scope.file);
																return $http.post(URL, fd, {
																				transformRequest: angular.identity,
																				headers: { 'Content-Type': undefined }
																}).then(function (res) {
																				$scope.file = null;
																				$state.reload();
																				notification.log(res.data.error || "Image uploaded", { addnCls: 'humane-flatty-success' });
																}).catch(function (res) {
																				notification.log(res.data.error || "Could not upload", { addnCls: 'humane-flatty-error' });
																});
												};
								},
								template: '<div class="row">\n\t\t\t\t<style>\n\t\t\t\t\t.uploader {\n\t\t\t\t\t\tcolor: #333;\n\t\t\t\t\t\tbackground-color: #f7f7f7;\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t\t\tfont-weight: 400;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tvertical-align: middle;\n\t\t\t\t\t\ttouch-action: manipulation;\n\t\t\t\t\t\tbackground-image: none;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\tborder: 1px dashed #ccc;\n\t\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\t\tpadding: 24px 48px;\n\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t\tline-height: 1.42857;\n\t\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\t\t-webkit-user-select: none;\n\t\t\t\t\t\t-moz-user-select: none;\n\t\t\t\t\t\t-ms-user-select: none;\n\t\t\t\t\t\tuser-select: none;\n\t\t\t\t\t}\n\t\t\t\t\t.uploader.bg-success {\n\t\t\t\t\t\tbackground-color: #dff0d8;\n\t\t\t\t\t}\n\t\t\t\t\t.uploader.bg-danger {\n\t\t\t\t\t\tbackground-color: #f2dede;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<div class="col-md-4" ng-hide="file">\n\t\t\t\t\t<div class="uploader"\n\t\t\t\t\t\tngf-drop\n\t\t\t\t\t\tngf-select\n\t\t\t\t\t\tngf-drag-over-class="{pattern: \'image/*\', accept:\'bg-success\', reject:\'bg-danger\', delay:50}"\n\t\t\t\t\t\tngf-pattern="image/*"\n\t\t\t\t\t\tngf-max-total-size="\'1MB\'"\n\t\t\t\t\t\tngf-change="onFileSelect($files)"\n\t\t\t\t\t\tngf-multiple="false">Select an image or drop it here</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="col-md-4" ng-show="file">\n\t\t\t\t\t<button type="button" class="btn btn-success btn-lg" ng-click="upload()">\n\t\t\t\t\t\t<span class="glyphicon glyphicon-upload"></span> Upload the image\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t</div>'
				};
}];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminBadges = NGAdminBadges;
function NGAdminBadges(nga, allEntities /* all other entities */) {
    var badges = allEntities.badges;

    var commonFields = [nga.field('Name').isDetailLink(true).validation({ required: true }), nga.field('Price', 'float').validation({ required: true })];
    badges.listView().fields(commonFields.concat([nga.field('Thumbnail', 'template').template('<img src="{{ entry.values.Thumbnail }}" class="product-thumbnail" alt="{{ entry.values.Thumbnail }}"/>')]));
    badges.showView().fields(commonFields.concat([nga.field('Thumbnail', 'template').template('<img src="{{ entry.values.Thumbnail }}" class="product-thumbnail" alt="{{ entry.values.Thumbnail }}"/>'), nga.field('Image', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: true })]));
    badges.creationView().fields(commonFields.concat([nga.field('Image', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: true })]));
    badges.editionView().fields(commonFields.concat([nga.field('Thumbnail', 'template').template('<img src="{{ entry.values.Thumbnail }}" class="product-thumbnail" alt="{{ entry.values.Thumbnail }}"/>'), nga.field('Image', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: true })]));
    badges.deletionView();
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminProducts = NGAdminProducts;

var _adminData = __webpack_require__(0);

var _adminUtils = __webpack_require__(1);

function NGAdminProducts(nga, allEntities /* all other entities */) {
    var products = allEntities.products; // outside reference
    var teams = allEntities.teams;

    // MARK: Products
    products.listView().fields([nga.field('ID'), nga.field('Name').isDetailLink(true), nga.field('Description'), nga.field('Price'), nga.field('Gender'), nga.field('TeamID', 'reference').targetEntity(teams).targetField(nga.field('Name.en'))]);

    products.showView().fields(products.listView().fields().concat([
    // nga.field('Image'),
    nga.field('Thumbnail', 'template').template('<img src="{{ entry.values.Thumbnail }}" class="product-thumbnail" alt="{{ entry.values.Thumbnail }}"/>'), nga.field('KitCode'), nga.field('Category.Name').label("Category"), nga.field('Brand.Name'), nga.field('Team.Name.en'), nga.field('Team.Name.ar'), nga.field('Collections', 'embedded_list') // Define a 1-N relationship with the (embedded) comment entity
    .targetFields([// which comment fields to display in the datagrid / form
    nga.field('Name'), nga.field('Code'), nga.field('CreatedAt', 'date')])]));
    var commonFields = [nga.field('Name').isDetailLink(true).validation({ required: true }), nga.field('Description').validation({ required: true }), nga.field('Gender', 'choice').choices(_adminData.ProductGender).validation({ required: true }), nga.field('Brand', 'choice').map((0, _adminUtils.mapExtractEntryField)("Brand.Name")).choices(_adminData.ProductBrands).validation({ required: true }), nga.field('KitCode', 'choice').label('Kit').choices(_adminData.ProductKits).validation({ required: true }), nga.field('Collections', 'choices').map((0, _adminUtils.mapExtractArrayField)("Code")).choices(_adminData.ProductCollections), nga.field('TeamID', 'reference').targetEntity(teams).targetField(nga.field('Name.en')),
    // nga.field('upload', 'template')
    //     .label('Upload image')
    //     .template(`<uploader prefix="'/admin/products/image-upload'" suffix="''"/>`),
    nga.field('Thumbnail', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: true }), nga.field('Image', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: true }), nga.field('Image2', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: false }), nga.field('Image3', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: false }), nga.field('Image4', 'file').uploadInformation({
        'url': '/admin/products/image-upload',
        'apifilename': 'image_name' }).validation({ required: false }), nga.field('Thumbnail Preview', 'template').template('<img src="{{ entry.values.Thumbnail }}" class="product-thumbnail" alt="{{ entry.values.Thumbnail }}"/>'), nga.field('Image Preview', 'template').template('<img src="{{ entry.values.Image }}" class="product-thumbnail" alt="{{ entry.values.Image }}"/>'), nga.field('Image2 Preview', 'template').template('<img src="{{ entry.values.Image2 }}" class="product-thumbnail" alt="{{ entry.values.Image2 }}"/>'), nga.field('Image3 Preview', 'template').template('<img src="{{ entry.values.Image3 }}" class="product-thumbnail" alt="{{ entry.values.Image3 }}"/>'), nga.field('Image4 Preview', 'template').template('<img src="{{ entry.values.Image4 }}" class="product-thumbnail" alt="{{ entry.values.Image4 }}"/>')];

    products.creationView().fields(commonFields.concat([nga.field('AvailableQuantity', 'number').validation({ required: true }), nga.field('Price', 'float').validation({ required: true }), nga.field('Sizes', 'choices').map((0, _adminUtils.mapExtractArrayField)("Name")).choices(_adminData.ProductSizes).validation({ required: true })]));
    products.editionView().fields(commonFields.concat([]));
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminUsers = NGAdminUsers;

var _adminData = __webpack_require__(0);

function NGAdminUsers(nga, allEntities /* all other entities */) {
    var users = allEntities.users;

    // set the fields of the user entity list view
    users.listView().fields([nga.field('ID'), nga.field('Email').isDetailLink(true), nga.field('UserAccessLevel', 'choice').choices([{ value: 10, label: 'Anonymous' }, { value: 50, label: 'User' }, { value: 100, label: 'Admin' }]), nga.field('Name'), nga.field('FirebaseId'), nga.field('CreatedAt', 'datetime'), nga.field('UpdatedAt', 'datetime'), nga.field('DeletedAt', 'datetime')]).filters([nga.field('q').label('User Search').pinned(true)]);
    users.creationView().fields([nga.field('Email', 'email').validation({ required: true }),
    // nga.field('Name'),
    // nga.field('Email', 'Email'),
    nga.field('UserAccessLevel', 'choice').choices(_adminData.UserAccessLevels).validation({ required: true })
    // nga.field('address.street').label('Street'),
    // nga.field('address.city').label('City'),
    // nga.field('address.zipcode').label('Zipcode'),
    // nga.field('phone'),
    // nga.field('website')
    ]);
    users.editionView().fields(users.creationView().fields());
    users.deletionView();
    // add the user entity to the admin application
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminLeagues = NGAdminLeagues;

var _adminData = __webpack_require__(0);

/*
        "country_id": 99474,
        "name": "World Cup",
        "is_cup": true,
        "current_season_id": 892,
        "current_round_id": 0,
        "current_stage_id": 1731,
 */

function NGAdminLeagues(nga, allEntities /* all other entities */) {
    var leagues = allEntities.leagues;

    var commonFields = [nga.field('Name.en').isDetailLink(true), nga.field('Name.ar'), nga.field('StatsLeagueID')];

    leagues.listView().fields(commonFields.concat([nga.field('ID')]));
    leagues.creationView().fields(commonFields.concat([]));
    leagues.editionView().fields(commonFields.concat([nga.field('ID')]));
    // leagues.deletionView();
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminTeams = NGAdminTeams;

var _adminData = __webpack_require__(0);

function NGAdminTeams(nga, allEntities /* all other entities */) {
    var teams = allEntities.teams;
    var leagues = allEntities.leagues;
    var sportmonksTeams = allEntities.sportmonksTeams;
    // teams
    teams.listView().fields([nga.field('ID'), nga.field('Logo', 'template').label('Logo').template('<img\n                src="{{ entry.values.Logo }}"\n                class="club-logo"\n                alt="{{ entry.values.Logo }}"/>'), nga.field('Name.en').isDetailLink(true), nga.field('Name.ar'), nga.field('StatsBuyButtonState', 'choice').choices(_adminData.StatsBuyButtonStates).label('Buy Button')]
    // nga.field('Leagues','reference_many')
    //     .targetEntity(leagues)
    //     .targetField(nga.field('Name.en')),
    );
    teams.creationView().fields([nga.field('Name.en'), nga.field('Name.ar'), nga.field('EnableStatsBuyButton', 'boolean').label('Show Buy Button'), nga.field('StatsTeamIDCombinedKey', 'reference').label('StatsTeam').targetEntity(sportmonksTeams).targetField(nga.field('name')), nga.field('Leagues', 'reference_many').targetEntity(leagues).targetField(nga.field('Name.en'))
    // .remoteComplete(true, {
    //     refreshDelay: 200,
    //     searchQuery: function(search) { return { q: search }; }
    // }),
    // nga.field('LeagueID', 'number')
    // nga.field('LeagueID', 'reference')
    //     .label('League')
    //     .targetEntity(leagues)
    //     .targetField('ID')
    //     .sortField('Name')
    //     .sortDir('ASC')
    //     .validation({ required: true })
    ]);
    teams.editionView().fields(teams.listView().fields().concat([nga.field('StatsTeamIDCombinedKey', 'reference').label('StatsTeam').targetEntity(sportmonksTeams).targetField(nga.field('name')), nga.field('Leagues', 'reference_many').targetEntity(leagues).targetField(nga.field('Name.en')), nga.field('CreatedAt', 'datetime'), nga.field('UpdatedAt', 'datetime'), nga.field('DeletedAt', 'datetime')]));
    // teams.deletionView();
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminProductVariations = NGAdminProductVariations;

var _adminData = __webpack_require__(0);

var _adminUtils = __webpack_require__(1);

function NGAdminProductVariations(nga, allEntities /* all other entities */) {
    var variations = allEntities.variations;
    var products = allEntities.products;
    var badges = allEntities.badges;

    var commonFields = [nga.field('ProductID', 'reference').targetEntity(products).targetField(nga.field('Name')), nga.field('BadgeID', 'reference').targetEntity(badges).targetField(nga.field('Name')), nga.field('Size', 'choice').map((0, _adminUtils.mapExtractEntryField)("Size.Name")).choices(_adminData.ProductSizes).validation({ required: true }), nga.field('SKU'), nga.field('AvailableQuantity', 'number')];

    variations.listView().fields([nga.field('SKU').isDetailLink(true), nga.field('Price', 'float').validation({ required: true })]);
    variations.showView().fields(commonFields.concat([]));
    variations.creationView().fields(commonFields.concat([]));
    variations.editionView().fields(commonFields.concat([]));
    variations.deletionView();
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminSportmonks = NGAdminSportmonks;

var _adminData = __webpack_require__(0);

function NGAdminSportmonks(nga, allEntities /* all other entities */) {
    var teams = allEntities.sportmonksTeams;
    // teams
    /*
            "id": 65,
        "legacy_id": 376,
        "country_id": 462,
        "name": "Southampton",
        "short_code": "SOU",
        "national_team": false,
        "founded": 1885,
        "logo_path": "https://cdn.sportmonks.com/images/soccer/teams/1/65.png",
        "venue_id": 167
     */
    var commonFields = [nga.field('name.en').isDetailLink(true), nga.field('name.ar'), nga.field('id'), nga.field('Logo', 'template').label('Logo').template('<img\n                src="{{ entry.values.logo_path }}"\n                class="club-logo"\n                alt="{{ entry.values.logo_path }}"/>'), nga.field('short_code'), nga.field('national_team'), nga.field('combinedLeagueSeasonTeamId').label('Combined Key')];
    teams.listView().fields(commonFields);
    teams.editionView().fields(commonFields.concat([nga.field('founded'), nga.field('leagueId'), nga.field('seasonId')]));
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NGAdminOrders = NGAdminOrders;

var _adminData = __webpack_require__(0);

var _adminUtils = __webpack_require__(1);

function NGAdminOrders(nga, allEntities /* all other entities */) {
    var orders = allEntities.orders; // outside reference
    var teams = allEntities.teams;

    // MARK: orders
    orders.listView().fields([nga.field('ID').isDetailLink(true), nga.field('Shipping Address'), nga.field('Email'), nga.field('Subotal'), nga.field('VAT'), nga.field('Shipping Costs'), nga.field('Total'), nga.field('Shipping Method'), nga.field('Notes')]);

    orders.showView().fields(orders.listView().fields().concat([]));

    var commonFields = [];

    orders.creationView().fields(commonFields.concat([]));
    orders.editionView().fields(commonFields.concat([]));
}

/***/ })
/******/ ]);
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 09641849e5fa388641c4234ee7f384f90697bad4
